import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, uuid } from './../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { PoCheckboxSize } from './po-checkbox-size.enum';
import * as i0 from "@angular/core";
/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado/mixed e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado/mixed.
 *
 * **Acessibilidade tratada no componente:**
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - O componente foi desenvolvido utilizando controles padrões HTML para permitir a identificação do mesmo na interface por tecnologias assistivas. [WCAG 4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 * - A cor não deve ser o único meio para diferenciar o componente do seu estado marcado e desmarcado. [WGAG 1.4.1: Use of Color, 3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)
 */
export class PoCheckboxBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado quando o valor do *checkbox* for alterado.
         */
        this.change = new EventEmitter();
        this.id = uuid();
        this._disabled = false;
        this._size = PoCheckboxSize.medium;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estado do *checkbox* como desabilitado.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho do *checkbox*
     *
     * Valores válidos:
     * - `medium`: o `po-checkbox` fica do tamanho padrão, com 24px de altura.;
     * - `large`: o `po-checkbox` fica maior, com 32px de altura.;
     *
     * @default `medium`
     *
     */
    set size(value) {
        this._size = PoCheckboxSize[value] ? PoCheckboxSize[value] : PoCheckboxSize.medium;
    }
    get size() {
        return this._size;
    }
    changeValue() {
        if (this.propagateChange) {
            this.propagateChange(this.checkboxValue);
        }
        this.change.emit(this.checkboxValue);
    }
    checkOption(value) {
        if (!this.disabled) {
            value === 'mixed' ? this.changeModelValue(true) : this.changeModelValue(!value);
            this.changeValue();
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value !== this.checkboxValue) {
            this.changeModelValue(value);
        }
    }
}
PoCheckboxBaseComponent.ɵfac = function PoCheckboxBaseComponent_Factory(t) { return new (t || PoCheckboxBaseComponent)(); };
PoCheckboxBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoCheckboxBaseComponent, inputs: { name: "name", autoFocus: ["p-auto-focus", "autoFocus"], label: ["p-label", "label"], checkboxValue: ["p-checkboxValue", "checkboxValue"], checkBoxRequired: ["p-required", "checkBoxRequired"], disabled: ["p-disabled", "disabled"], size: ["p-size", "size"] }, outputs: { change: "p-change" } });
__decorate([
    InputBoolean()
], PoCheckboxBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    InputBoolean()
], PoCheckboxBaseComponent.prototype, "checkBoxRequired", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxBaseComponent, [{
        type: Directive
    }], null, { name: [{
            type: Input,
            args: ['name']
        }], autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], label: [{
            type: Input,
            args: ['p-label']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], checkboxValue: [{
            type: Input,
            args: ['p-checkboxValue']
        }], checkBoxRequired: [{
            type: Input,
            args: ['p-required']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,