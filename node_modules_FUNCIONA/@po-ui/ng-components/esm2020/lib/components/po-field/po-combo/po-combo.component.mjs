import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoComboBaseComponent } from './po-combo-base.component';
import { PoComboFilterMode } from './po-combo-filter-mode.enum';
import { PoComboFilterService } from './po-combo-filter.service';
import { PoComboOptionTemplateDirective } from './po-combo-option-template/po-combo-option-template.directive';
import { uuid } from '../../../utils/util';
import * as i0 from "@angular/core";
import * as i1 from "./po-combo-filter.service";
import * as i2 from "../../../services/po-control-position/po-control-position.service";
import * as i3 from "@angular/platform-browser";
import * as i4 from "../../../services/po-language/po-language.service";
import * as i5 from "@angular/common";
import * as i6 from "../po-clean/po-clean.component";
import * as i7 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i8 from "../po-field-container/po-field-container.component";
import * as i9 from "../../po-loading/po-loading.component";
import * as i10 from "../../po-loading/po-loading-overlay/po-loading-overlay.component";
import * as i11 from "../../po-icon/po-icon.component";
const _c0 = ["containerElement"];
const _c1 = ["contentElement"];
const _c2 = ["iconArrow"];
const _c3 = ["inp"];
const _c4 = ["poComboBody"];
function PoComboComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 17);
    i0.ɵɵelement(1, "po-icon", 18);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("po-field-icon-disabled", ctx_r0.disabled);
    i0.ɵɵproperty("p-icon", ctx_r0.icon);
} }
function PoComboComponent_po_clean_6_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-clean", 19);
    i0.ɵɵlistener("p-change-event", function PoComboComponent_po_clean_6_Template_po_clean_p_change_event_0_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r15.clear($event)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-element-ref", ctx_r2.inputEl);
} }
function PoComboComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoComboComponent_div_12_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoComboComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtemplate(1, PoComboComponent_div_12_ng_container_1_Template, 1, 0, "ng-container", 11);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    const _r9 = i0.ɵɵreference(17);
    const _r7 = i0.ɵɵreference(15);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.infiniteLoading)("ngIfThen", _r9)("ngIfElse", _r7);
} }
function PoComboComponent_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-loading", 20);
} }
function PoComboComponent_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-loading-overlay", 20);
} }
function PoComboComponent_ng_template_18_li_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoComboComponent_ng_template_18_li_3_ng_template_2_label_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "label", 28);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r21 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r27 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(option_r21[ctx_r27.dynamicLabel]);
} }
function PoComboComponent_ng_template_18_li_3_ng_template_2_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 29);
    i0.ɵɵelement(1, "span", 30);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r21 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r29 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("innerHTML", ctx_r29.getLabelFormatted(option_r21 == null ? null : option_r21[ctx_r29.dynamicLabel]), i0.ɵɵsanitizeHtml);
} }
function PoComboComponent_ng_template_18_li_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoComboComponent_ng_template_18_li_3_ng_template_2_label_0_Template, 2, 1, "label", 26);
    i0.ɵɵtemplate(1, PoComboComponent_ng_template_18_li_3_ng_template_2_ng_template_1_Template, 2, 1, "ng-template", null, 27, i0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r28 = i0.ɵɵreference(2);
    const option_r21 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngIf", option_r21 == null ? null : option_r21.options)("ngIfElse", _r28);
} }
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_1_ng_template_0_Template(rf, ctx) { }
const _c5 = function (a0, a1) { return { $implicit: a0, selected: a1 }; };
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 33);
} if (rf & 2) {
    const option_r21 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r35 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r35.comboOptionTemplate == null ? null : ctx_r35.comboOptionTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c5, option_r21, ctx_r35.compareObjects(ctx_r35.selectedView, option_r21)));
} }
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_3_ng_template_1_Template(rf, ctx) { }
const _c6 = function (a0) { return { $implicit: a0 }; };
function PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "a", 29);
    i0.ɵɵtemplate(1, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_3_ng_template_1_Template, 0, 0, "ng-template", 33);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r21 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r37 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r37.comboOptionTemplate == null ? null : ctx_r37.comboOptionTemplate.templateRef)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c6, option_r21));
} }
function PoComboComponent_ng_template_18_li_3_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_container_0_Template, 1, 0, "ng-container", 11);
    i0.ɵɵtemplate(1, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_1_Template, 1, 5, "ng-template", null, 31, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(3, PoComboComponent_ng_template_18_li_3_ng_template_4_ng_template_3_Template, 2, 4, "ng-template", null, 32, i0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r34 = i0.ɵɵreference(2);
    const _r36 = i0.ɵɵreference(4);
    const ctx_r26 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngIf", ctx_r26.isOptionGroupList)("ngIfThen", _r34)("ngIfElse", _r36);
} }
function PoComboComponent_ng_template_18_li_3_Template(rf, ctx) { if (rf & 1) {
    const _r43 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 7);
    i0.ɵɵlistener("click", function PoComboComponent_ng_template_18_li_3_Template_li_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r43); const option_r21 = restoredCtx.$implicit; const ctx_r42 = i0.ɵɵnextContext(2); return i0.ɵɵresetView((option_r21 == null ? null : option_r21.options) ? undefined : ctx_r42.onOptionClick(option_r21, $event)); });
    i0.ɵɵtemplate(1, PoComboComponent_ng_template_18_li_3_ng_container_1_Template, 1, 0, "ng-container", 11);
    i0.ɵɵtemplate(2, PoComboComponent_ng_template_18_li_3_ng_template_2_Template, 3, 2, "ng-template", null, 24, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtemplate(4, PoComboComponent_ng_template_18_li_3_ng_template_4_Template, 5, 3, "ng-template", null, 25, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r21 = ctx.$implicit;
    const _r23 = i0.ɵɵreference(3);
    const _r25 = i0.ɵɵreference(5);
    const ctx_r20 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("po-combo-item-selected", ctx_r20.compareObjects(ctx_r20.selectedView, option_r21));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r20.comboOptionTemplate)("ngIfThen", _r25)("ngIfElse", _r23);
} }
function PoComboComponent_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "ul", 21, 22);
    i0.ɵɵtemplate(3, PoComboComponent_ng_template_18_li_3_Template, 6, 5, "li", 23);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r12.visibleOptions);
} }
function PoComboComponent_ng_template_20_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r44 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r44.literals.noData, " ");
} }
function PoComboComponent_ng_template_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 34)(1, "div", 35);
    i0.ɵɵtemplate(2, PoComboComponent_ng_template_20_span_2_Template, 2, 1, "span", 12);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r14.isServerSearching);
} }
const poComboContainerOffset = 8;
const poComboContainerPositionDefault = 'bottom';
/**
 * @docsExtends PoComboBaseComponent
 *
 * @description
 * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * @example
 *
 * <example name="po-combo-basic" title="PO Combo Basic">
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-labs" title="PO Combo Labs">
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-scheduling" title="PO Combo - Scheduling">
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.service.ts"> </file>
 * </example>
 *
 * <example name="po-combo-transfer" title="PO Combo - Banking Transfer">
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes" title="PO Combo - Heroes">
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes-reactive-form" title="PO Combo - Heroes Reactive Form">
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-infinity-scroll" title="PO Combo - Inifity Scroll">
 *   <file name="sample-po-combo-infinity-scroll/sample-po-combo-infinity-scroll.component.html"> </file>
 *   <file name="sample-po-combo-infinity-scroll/sample-po-combo-infinity-scroll.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-hotels" title="PO Combo - Booking Hotel">
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
 * </example>
 */
export class PoComboComponent extends PoComboBaseComponent {
    constructor(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized, languageService) {
        super(languageService);
        this.element = element;
        this.differs = differs;
        this.defaultService = defaultService;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.sanitized = sanitized;
        this.comboIcon = 'po-icon-arrow-down';
        this.comboOpen = false;
        this.id = `po-combo[${uuid()}]`;
        this.isProcessingValueByTab = false;
        this.scrollTop = 0;
        this.shouldMarkLetters = true;
        this.infiniteLoading = false;
        this._isServerSearching = false;
        this.onScroll = () => {
            this.adjustContainerPosition();
        };
        this.differ = differs.find([]).create(null);
    }
    set isServerSearching(value) {
        if (value) {
            this._isServerSearching = value;
            this.changeDetector.detectChanges();
            this.setContainerPosition();
            this.initializeListeners();
        }
        else {
            this._isServerSearching = value;
        }
    }
    get isServerSearching() {
        return this._isServerSearching;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
        if (this.infiniteScroll) {
            this.checkInfiniteScroll();
        }
    }
    ngOnChanges(changes) {
        if (changes.debounceTime) {
            this.unsubscribeKeyupObservable();
            this.initInputObservable();
        }
        if (changes.filterService) {
            this.configAfterSetFilterService(this.filterService);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.infiniteScroll) {
            this.subscriptionScrollEvent?.unsubscribe();
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    onBlur() {
        this.onModelTouched?.();
    }
    onKeyDown(event) {
        const key = event.keyCode;
        const inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && key === PoKeyCodeEnum.tab && inputValue && !this.disabledTabFilter) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (key === PoKeyCodeEnum.arrowUp || key === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.comboOpen) {
                if (key === PoKeyCodeEnum.arrowUp) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (key === PoKeyCodeEnum.tab || key === PoKeyCodeEnum.esc) {
            if (key === PoKeyCodeEnum.esc && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            this.isProcessingValueByTab = true;
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            }
            return;
        }
        // Tecla "enter"
        if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            const isUpdateModel = this.selectedView.value !== this.selectedValue || inputValue !== this.selectedView.label;
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            if (!this.service) {
                this.updateComboList([...this.cacheStaticOptions]);
            }
            return;
        }
        if (key === PoKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
    }
    onKeyUp(event) {
        const key = event.keyCode || event.which;
        const inputValue = event.target.value;
        const isValidKey = key !== PoKeyCodeEnum.arrowUp && key !== PoKeyCodeEnum.arrowDown && key !== PoKeyCodeEnum.enter;
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.comboOptionsList, this.filterMode);
                    this.inputChange.emit(inputValue);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                const useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList([...this.cacheOptions]);
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    }
    initInputObservable() {
        if (this.service) {
            const keyupObservable = fromEvent(this.inputEl.nativeElement, 'keyup').pipe(filter((e) => this.isValidCharacterToSearch(e.keyCode)), map((e) => e.currentTarget.value), distinctUntilChanged(), tap(() => {
                this.shouldMarkLetters = false;
            }), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe(value => {
                if (value.length >= this.filterMinlength || !value) {
                    this.controlApplyFilter(value);
                }
            });
        }
    }
    controlApplyFilter(value) {
        if (!this.isProcessingValueByTab && (!this.selectedOption || value !== this.selectedOption[this.dynamicLabel])) {
            this.defaultService.hasNext = true;
            this.page = this.setPage();
            this.options = [];
            this.applyFilter(value, true);
        }
        this.isProcessingValueByTab = false;
    }
    applyFilter(value, reset = false) {
        if (this.defaultService.hasNext) {
            this.controlComboVisibility(false, reset);
            this.isServerSearching = true;
            const param = this.infiniteScroll
                ? { property: this.fieldLabel, value, page: this.page, pageSize: this.pageSize }
                : { property: this.fieldLabel, value };
            this.filterSubscription = this.service?.getFilteredData(param, this.filterParams).subscribe(items => this.setOptionsByApplyFilter(value, items, reset), error => this.onErrorFilteredData());
        }
    }
    setOptionsByApplyFilter(value, items, reset = false) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.infiniteLoading = false;
        this.options = this.prepareOptions(items);
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true, reset);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.comboOptionsList;
        }
    }
    getObjectByValue(value) {
        if (this.selectedValue !== value && this.selectedOption?.[this.dynamicLabel] !== value) {
            this.isProcessingValueByTab = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(item => this.updateOptionByFilteredValue(item), error => this.onErrorGetObjectByValue());
        }
    }
    updateOptionByFilteredValue(item) {
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout(() => {
            this.isProcessingValueByTab = false;
        }, this.debounceTime);
    }
    selectPreviousOption() {
        const currentViewValue = this.selectedView && this.selectedView[this.dynamicValue];
        if (currentViewValue) {
            const nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption[this.dynamicValue] !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            const visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption[this.dynamicValue] !== currentViewValue && !this.changeOnEnter);
        }
    }
    selectNextOption() {
        const currentViewValue = this.selectedView && this.selectedView[this.dynamicValue];
        if (currentViewValue) {
            const nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption[this.dynamicValue] !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            const index = this.changeOnEnter ? 1 : 0;
            const visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption[this.dynamicValue] !== currentViewValue && !this.changeOnEnter);
        }
    }
    toggleComboVisibility() {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    }
    applyFilterInFirstClick() {
        if (this.isFirstFilter && !this.selectedValue) {
            this.options = [];
            const scrollingControl = this.setScrollingControl();
            this.applyFilter('', scrollingControl);
        }
    }
    controlComboVisibility(toOpen, reset = false) {
        toOpen ? this.open(reset) : this.close(reset);
    }
    onOptionClick(option, event) {
        const inputValue = this.getInputValue();
        const isUpdateModel = option[this.dynamicValue] !== this.selectedValue ||
            !!(this.selectedView && inputValue !== this.selectedView[this.dynamicLabel]);
        if (event) {
            event.stopPropagation();
        }
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        if (!this.service) {
            this.updateComboList([...this.cacheStaticOptions]);
        }
        this.previousSearchValue = this.selectedView[this.dynamicLabel];
    }
    scrollTo(index) {
        const selectedItem = this.element.nativeElement.querySelectorAll('.po-combo-item-selected');
        const scrollTop = !selectedItem.length || index <= 1 ? 0 : selectedItem[0].offsetTop - 88;
        if (!this.infiniteScroll) {
            this.setScrollTop(scrollTop);
        }
    }
    getInputValue() {
        return this.inputEl.nativeElement.value;
    }
    setInputValue(value) {
        this.inputEl.nativeElement.value = value;
    }
    wasClickedOnToggle(event) {
        if (this.comboOpen &&
            !this.inputEl.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                const scrollingControl = this.setScrollingControl();
                this.applyFilter('', scrollingControl);
            }
        }
    }
    getLabelFormatted(label) {
        const sanitizedLabel = this.sanitizeTagHTML(label);
        let format = sanitizedLabel;
        if (this.isFiltering ||
            (this.service &&
                this.getInputValue() &&
                !this.compareObjects(this.cacheOptions, this.visibleOptions) &&
                this.shouldMarkLetters)) {
            const labelInput = this.sanitizeTagHTML(this.getInputValue().toString().toLowerCase());
            const labelLowerCase = sanitizedLabel.toLowerCase();
            const openTagBold = '<span class="po-font-text-large-bold">';
            const closeTagBold = '</span>';
            let startString;
            let middleString;
            let endString;
            switch (this.filterMode) {
                case PoComboFilterMode.startsWith:
                case PoComboFilterMode.contains:
                    const indexOfLabelInput = labelLowerCase.indexOf(labelInput);
                    if (indexOfLabelInput > -1) {
                        startString = sanitizedLabel.substring(0, indexOfLabelInput);
                        middleString = sanitizedLabel.substring(indexOfLabelInput, indexOfLabelInput + labelInput.length);
                        endString = sanitizedLabel.substring(indexOfLabelInput + labelInput.length);
                        format = startString + openTagBold + middleString + closeTagBold + endString;
                    }
                    break;
                case PoComboFilterMode.endsWith:
                    const lastIndexOfLabelInput = labelLowerCase.lastIndexOf(labelInput);
                    if (lastIndexOfLabelInput > -1) {
                        startString = sanitizedLabel.substring(0, lastIndexOfLabelInput);
                        middleString = sanitizedLabel.substring(lastIndexOfLabelInput);
                        format = startString + openTagBold + middleString + closeTagBold;
                    }
                    break;
            }
        }
        return this.safeHtml(format);
    }
    safeHtml(value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    }
    isValidCharacterToSearch(keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    }
    searchOnEnter(value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    }
    showMoreInfiniteScroll({ target }) {
        if (this.defaultService.hasNext) {
            this.infiniteLoading = true;
        }
        const scrollPosition = target.offsetHeight + target.scrollTop;
        if (scrollPosition >= target.scrollHeight * (this.infiniteScrollDistance / 110)) {
            this.page++;
            this.applyFilter('', true);
        }
    }
    checkInfiniteScroll() {
        if (this.hasInfiniteScroll() && this.poComboBody?.nativeElement.scrollHeight >= 175) {
            this.includeInfiniteScroll();
        }
    }
    hasInfiniteScroll() {
        return this.infiniteScroll && this.poComboBody?.nativeElement.scrollHeight && this.defaultService.hasNext;
    }
    includeInfiniteScroll() {
        this.subscriptionScrollEvent?.unsubscribe();
        this.scrollEvent$ = this.defaultService.scrollListener(this.poComboBody.nativeElement);
        this.subscriptionScrollEvent = this.scrollEvent$.subscribe(event => {
            this.showMoreInfiniteScroll(event);
        });
    }
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(poComboContainerPositionDefault);
    }
    close(reset) {
        this.comboOpen = false;
        if (!reset) {
            if (!this.getInputValue()) {
                this.page = this.setPage();
                this.defaultService.hasNext = true;
            }
            if (this.infiniteScroll) {
                this.options = this.setOptions();
            }
        }
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-down';
        this.removeListeners();
        this.isFiltering = false;
    }
    initializeListeners() {
        this.removeListeners();
        if (this.infiniteScroll) {
            this.checkInfiniteScroll();
        }
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
            setTimeout(() => this.adjustContainerPosition(), 250);
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    onErrorGetObjectByValue() {
        this.updateOptionByFilteredValue(null);
    }
    onErrorFilteredData() {
        this.isServerSearching = false;
        this.updateComboList([]);
        this.controlComboVisibility(true);
    }
    open(reset) {
        this.comboOpen = true;
        if (!reset && this.infiniteScroll) {
            if (!this.getInputValue()) {
                this.page = 1;
            }
            this.options = this.setOptions();
            this.scrollTo(0);
        }
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-up';
        this.initializeListeners();
        this.inputEl.nativeElement.focus();
        if (!this.infiniteScroll) {
            this.scrollTo(this.getIndexSelectedView());
        }
        this.setContainerPosition();
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        if (this.infiniteScroll && !this.defaultService.hasNext) {
            this.subscriptionScrollEvent?.unsubscribe();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    sanitizeTagHTML(value = '') {
        return value.replace(/\</gm, '&lt;').replace(/\>/g, '&gt;');
    }
    setContainerPosition() {
        this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputEl, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
    setOptions() {
        return this.getInputValue() ? this.options : [];
    }
    setScrollTop(scrollTop) {
        if (this.contentElement) {
            this.contentElement.nativeElement.scrollTop = scrollTop;
        }
    }
    prepareOptions(items) {
        return this.infiniteScroll ? [...this.options, ...items] : items;
    }
    setPage() {
        return this.infiniteScroll ? 1 : undefined;
    }
    setScrollingControl() {
        return this.infiniteScroll ? true : false;
    }
}
PoComboComponent.ɵfac = function PoComboComponent_Factory(t) { return new (t || PoComboComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i1.PoComboFilterService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.PoControlPositionService), i0.ɵɵdirectiveInject(i3.DomSanitizer), i0.ɵɵdirectiveInject(i4.PoLanguageService)); };
PoComboComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoComboComponent, selectors: [["po-combo"]], contentQueries: function PoComboComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, PoComboOptionTemplateDirective, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.comboOptionTemplate = _t.first);
    } }, viewQuery: function PoComboComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5, ElementRef);
        i0.ɵɵviewQuery(_c1, 5, ElementRef);
        i0.ɵɵviewQuery(_c2, 7, ElementRef);
        i0.ɵɵviewQuery(_c3, 7, ElementRef);
        i0.ɵɵviewQuery(_c4, 5, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poComboBody = _t.first);
    } }, features: [i0.ɵɵProvidersFeature([
            PoComboFilterService,
            PoControlPositionService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoComboComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoComboComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 22, vars: 29, consts: [[3, "p-disabled", "p-help", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], ["class", "po-field-icon-container-left", 4, "ngIf"], ["autocomplete", "off", "type", "text", 1, "po-input", "po-combo-input", 3, "ngClass", "disabled", "id", "placeholder", "required", "click", "keyup", "blur", "keyup.enter", "keydown"], ["inp", ""], [1, "po-field-icon-container-right"], ["class", "po-icon-input", 3, "p-element-ref", "p-change-event", 4, "ngIf"], [3, "click"], ["iconArrow", ""], [1, "po-combo-container", 3, "hidden"], ["containerElement", ""], [4, "ngIf", "ngIfThen", "ngIfElse"], [4, "ngIf"], ["normalLoadingTemplate", ""], ["infiniteLoadingTemplate", ""], ["visibleOptionsTemplate", ""], ["noDataTemplate", ""], [1, "po-field-icon-container-left"], [1, "po-field-icon", "po-icon-input", 3, "p-icon"], [1, "po-icon-input", 3, "p-element-ref", "p-change-event"], [1, "po-combo-container-loading"], [1, "po-combo-container-content"], ["contentElement", "", "poComboBody", ""], [3, "po-combo-item-selected", "click", 4, "ngFor", "ngForOf"], ["defaultOptionTemplate", ""], ["optionTemplate", ""], ["class", "po-combo-item-title", 4, "ngIf", "ngIfElse"], ["optionLink", ""], [1, "po-combo-item-title"], [1, "po-combo-item"], [2, "pointer-events", "none", 3, "innerHTML"], ["optionsGroupTemplate", ""], ["defaultOptionsTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "po-combo-container-no-data"], [1, "po-combo-no-data", "po-text-center"]], template: function PoComboComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1);
        i0.ɵɵtemplate(2, PoComboComponent_div_2_Template, 2, 3, "div", 2);
        i0.ɵɵelementStart(3, "input", 3, 4);
        i0.ɵɵlistener("click", function PoComboComponent_Template_input_click_3_listener() { return ctx.toggleComboVisibility(); })("keyup", function PoComboComponent_Template_input_keyup_3_listener($event) { return ctx.onKeyUp($event); })("blur", function PoComboComponent_Template_input_blur_3_listener() { return ctx.onBlur(); })("keyup.enter", function PoComboComponent_Template_input_keyup_enter_3_listener($event) { return ctx.searchOnEnter($event.target.value); })("keydown", function PoComboComponent_Template_input_keydown_3_listener($event) { return ctx.onKeyDown($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "div", 5);
        i0.ɵɵtemplate(6, PoComboComponent_po_clean_6_Template, 1, 1, "po-clean", 6);
        i0.ɵɵelementStart(7, "span", 7, 8);
        i0.ɵɵlistener("click", function PoComboComponent_Template_span_click_7_listener() { return ctx.toggleComboVisibility(); });
        i0.ɵɵelementEnd()()();
        i0.ɵɵelementStart(9, "div", 9, 10);
        i0.ɵɵtemplate(11, PoComboComponent_ng_container_11_Template, 1, 0, "ng-container", 11);
        i0.ɵɵtemplate(12, PoComboComponent_div_12_Template, 2, 3, "div", 12);
        i0.ɵɵelementEnd();
        i0.ɵɵelement(13, "po-field-container-bottom");
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(14, PoComboComponent_ng_template_14_Template, 1, 0, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(16, PoComboComponent_ng_template_16_Template, 1, 0, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(18, PoComboComponent_ng_template_18_Template, 4, 1, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(20, PoComboComponent_ng_template_20_Template, 3, 1, "ng-template", null, 16, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(4);
        const _r11 = i0.ɵɵreference(19);
        const _r13 = i0.ɵɵreference(21);
        i0.ɵɵproperty("p-disabled", ctx.disabled)("p-help", ctx.help)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.icon);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-input-icon-left", ctx.icon);
        i0.ɵɵproperty("ngClass", ctx.clean && _r1.value ? "po-input-double-icon-right" : "po-input-icon-right")("disabled", ctx.disabled)("id", ctx.id)("placeholder", ctx.disabled ? "" : ctx.placeholder)("required", ctx.required);
        i0.ɵɵattribute("name", ctx.name);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.clean && !ctx.disabled);
        i0.ɵɵadvance(1);
        i0.ɵɵclassMapInterpolate1("po-icon po-field-icon ", ctx.comboIcon, " po-icon-input");
        i0.ɵɵclassProp("po-field-icon-disabled", ctx.disabled)("po-field-icon", !ctx.disabled);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("hidden", !ctx.comboOpen && !ctx.isServerSearching);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.visibleOptions.length)("ngIfThen", _r11)("ngIfElse", _r13);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.isServerSearching);
    } }, dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i5.NgTemplateOutlet, i6.PoCleanComponent, i7.PoFieldContainerBottomComponent, i8.PoFieldContainerComponent, i9.PoLoadingComponent, i10.PoLoadingOverlayComponent, i11.PoIconComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoComboComponent, [{
        type: Component,
        args: [{ selector: 'po-combo', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    PoComboFilterService,
                    PoControlPositionService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoComboComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoComboComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-help]=\"help\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <po-icon class=\"po-field-icon po-icon-input\" [class.po-field-icon-disabled]=\"disabled\" [p-icon]=\"icon\"></po-icon>\n    </div>\n\n    <input\n      #inp\n      class=\"po-input po-combo-input\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      [class.po-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [placeholder]=\"disabled ? '' : placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (blur)=\"onBlur()\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\"\n    />\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"po-icon-input\"\n        *ngIf=\"clean && !disabled\"\n        (p-change-event)=\"clear($event)\"\n        [p-element-ref]=\"inputEl\"\n      >\n      </po-clean>\n      <span\n        #iconArrow\n        class=\"po-icon po-field-icon {{ comboIcon }} po-icon-input\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [class.po-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n    <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate; else noDataTemplate\"> </ng-container>\n    <div *ngIf=\"isServerSearching\">\n      <ng-container *ngIf=\"infiniteLoading; then infiniteLoadingTemplate; else normalLoadingTemplate\"></ng-container>\n    </div>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n\n<ng-template #normalLoadingTemplate>\n  <po-loading class=\"po-combo-container-loading\"> </po-loading>\n</ng-template>\n\n<ng-template #infiniteLoadingTemplate>\n  <po-loading-overlay class=\"po-combo-container-loading\"> </po-loading-overlay>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement #poComboBody class=\"po-combo-container-content\">\n    <li\n      *ngFor=\"let option of visibleOptions\"\n      [class.po-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"option?.options ? undefined : onOptionClick(option, $event)\"\n    >\n      <ng-container *ngIf=\"comboOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n      <ng-template #defaultOptionTemplate>\n        <label *ngIf=\"option?.options; else optionLink\" class=\"po-combo-item-title\">{{\n          option[this.dynamicLabel]\n        }}</label>\n        <ng-template #optionLink>\n          <a class=\"po-combo-item\">\n            <span style=\"pointer-events: none\" [innerHTML]=\"getLabelFormatted(option?.[this.dynamicLabel])\"></span>\n          </a>\n        </ng-template>\n      </ng-template>\n\n      <ng-template #optionTemplate>\n        <ng-container *ngIf=\"isOptionGroupList; then optionsGroupTemplate; else defaultOptionsTemplate\"></ng-container>\n\n        <ng-template #optionsGroupTemplate>\n          <ng-template\n            [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{ $implicit: option, selected: compareObjects(selectedView, option) }\"\n          >\n          </ng-template>\n        </ng-template>\n\n        <ng-template #defaultOptionsTemplate>\n          <a class=\"po-combo-item\">\n            <ng-template\n              [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: option }\"\n            >\n            </ng-template>\n          </a>\n        </ng-template>\n      </ng-template>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"po-combo-container-no-data\">\n    <div class=\"po-combo-no-data po-text-center\">\n      <span *ngIf=\"!isServerSearching\">\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n" }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.IterableDiffers }, { type: i1.PoComboFilterService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.PoControlPositionService }, { type: i3.DomSanitizer }, { type: i4.PoLanguageService }]; }, { comboOptionTemplate: [{
            type: ContentChild,
            args: [PoComboOptionTemplateDirective, { static: true }]
        }], containerElement: [{
            type: ViewChild,
            args: ['containerElement', { read: ElementRef }]
        }], contentElement: [{
            type: ViewChild,
            args: ['contentElement', { read: ElementRef }]
        }], iconElement: [{
            type: ViewChild,
            args: ['iconArrow', { read: ElementRef, static: true }]
        }], inputEl: [{
            type: ViewChild,
            args: ['inp', { read: ElementRef, static: true }]
        }], poComboBody: [{
            type: ViewChild,
            args: ['poComboBody', { read: ElementRef }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,