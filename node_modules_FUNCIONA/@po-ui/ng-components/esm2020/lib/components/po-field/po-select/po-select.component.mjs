import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { removeDuplicatedOptions, removeDuplicatedOptionsWithFieldValue, removeUndefinedAndNullOptions, removeUndefinedAndNullOptionsWithFieldValue, uuid, validValue } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { PoFieldValidateModel } from '../po-field-validate.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../po-field-container/po-field-container-bottom/po-field-container-bottom.component";
import * as i4 from "../po-field-container/po-field-container.component";
const _c0 = ["select"];
function PoSelectComponent_option_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 6);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    let tmp_3_0;
    i0.ɵɵproperty("disabled", !!ctx_r1.placeholder)("hidden", !ctx_r1.selectedValue && !ctx_r1.placeholder)("selected", !ctx_r1.selectedValue)("value", (tmp_3_0 = ctx_r1.placeholder) !== null && tmp_3_0 !== undefined ? tmp_3_0 : "");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.placeholder, " ");
} }
function PoSelectComponent_option_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 7);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r3 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabled", ctx_r2.readonly)("value", option_r3 == null ? null : option_r3[ctx_r2.fieldValue]);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", option_r3 == null ? null : option_r3[ctx_r2.fieldLabel], " ");
} }
const PO_SELECT_FIELD_LABEL_DEFAULT = 'label';
const PO_SELECT_FIELD_VALUE_DEFAULT = 'value';
/**
 * @docsExtends PoFieldValidateModel
 *
 * @example
 *
 * <example name="po-select-basic" title="PO Select Basic">
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-labs" title="PO Select Labs">
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-customer-registration" title="PO Select - Customer registration">
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
 * </example>
 *
 * <example name="po-select-companies" title="PO Select Companies">
 *   <file name="sample-po-select-companies/sample-po-select-companies.component.html"> </file>
 *   <file name="sample-po-select-companies/sample-po-select-companies.component.ts"> </file>
 * </example>
 *
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-combo-option-template](/documentation/po-combo-option-template)**.
 *
 * > Obs: o template **[p-select-option-template](/documentation/po-select-option-template)** será depreciado na versão 14.x.x.
 */
export class PoSelectComponent extends PoFieldValidateModel {
    /* istanbul ignore next */
    constructor(changeDetector, differs, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        /**
         * @optional
         *
         * @description
         *
         * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
         *
         * Na versão 12.2.0 do Angular a verificação `strictTemplates` vem true como default. Portanto, para utilizar
         * two-way binding no componente deve se utilizar da seguinte forma:
         *
         * ```
         * <po-select ... [ngModel]="selectModel" (ngModelChange)="selectModel = $event"> </po-select>
         * ```
         */
        this.ngModelChange = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente para leitura.
         *
         * @default `false`
         */
        this.readonly = false;
        this.id = `po-select[${uuid()}]`;
        this._fieldLabel = PO_SELECT_FIELD_LABEL_DEFAULT;
        this._fieldValue = PO_SELECT_FIELD_VALUE_DEFAULT;
        this.differ = differs.find([]).create(null);
    }
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface `PoSelectOption`.
     *
     * Caso esta lista estiver vazia, o model será `undefined`.
     *
     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis
     * atualize a referência do objeto:
     *
     * ```
     * // atualiza a referência do objeto garantindo a atualização do template
     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];
     *
     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template
     * this.options.push({ value: 'x', label: 'Nova opção' });
     * ```
     */
    set options(options) {
        if (this.fieldLabel && this.fieldValue) {
            options.map(option => {
                option.label = option[this.fieldLabel];
                option.value = option[this.fieldValue];
            });
        }
        this.validateOptions([...options]);
        this.onUpdateOptions();
        this._options = [...options];
    }
    get options() {
        return this._options;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * @default `label`
     */
    set fieldLabel(value) {
        this._fieldLabel = value || PO_SELECT_FIELD_LABEL_DEFAULT;
        if (this.options && this.options.length > 0) {
            this.options = [...this.options];
        }
    }
    get fieldLabel() {
        return this._fieldLabel;
    }
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * @default `value`
     */
    set fieldValue(value) {
        this._fieldValue = value || PO_SELECT_FIELD_VALUE_DEFAULT;
        if (this.options && this.options.length > 0) {
            this.options = [...this.options];
        }
    }
    get fieldValue() {
        return this._fieldValue;
    }
    ngDoCheck() {
        const change = this.differ.diff(this.options);
        if (change) {
            this.validateOptions(this.options);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.selectElement.nativeElement.focus();
        }
    }
    onBlur() {
        this.onModelTouched?.();
    }
    // Altera o valor ao selecionar um item.
    onSelectChange(value) {
        this.onModelTouched?.();
        if (value && this.options && this.options.length) {
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.updateValues(optionFound);
            }
        }
    }
    onUpdateOptions() {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    }
    // Atualiza valores
    updateValues(option) {
        if (this.selectedValue !== option[this.fieldValue]) {
            this.selectedValue = option[this.fieldValue];
            this.selectElement.nativeElement.value = option[this.fieldValue];
            this.updateModel(option[this.fieldValue]);
            this.displayValue = option[this.fieldLabel];
            this.emitChange(option[this.fieldValue]);
        }
    }
    // Recebe as alterações do model
    onWriteValue(value) {
        const optionFound = this.findOptionValue(value);
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound[this.fieldValue];
            this.displayValue = optionFound[this.fieldLabel];
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.updateModel(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    }
    extraValidation(c) {
        return null;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) || (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    findOptionValue(value) {
        return this.options.find(option => this.isEqual(option.value, value));
    }
    validateOptions(options) {
        removeDuplicatedOptions(options);
        removeUndefinedAndNullOptions(options);
        removeDuplicatedOptionsWithFieldValue(options, this.fieldValue);
        removeUndefinedAndNullOptionsWithFieldValue(options, this.fieldValue);
    }
}
PoSelectComponent.ɵfac = function PoSelectComponent_Factory(t) { return new (t || PoSelectComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.Renderer2)); };
PoSelectComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoSelectComponent, selectors: [["po-select"]], viewQuery: function PoSelectComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectElement = _t.first);
    } }, inputs: { readonly: ["p-readonly", "readonly"], placeholder: ["p-placeholder", "placeholder"], options: ["p-options", "options"], fieldLabel: ["p-field-label", "fieldLabel"], fieldValue: ["p-field-value", "fieldValue"] }, outputs: { ngModelChange: "ngModelChange" }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoSelectComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoSelectComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 7, vars: 15, consts: [[3, "p-disabled", "p-help", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-select", 3, "disabled", "id", "required", "blur", "change"], ["select", ""], [3, "disabled", "hidden", "selected", "value", 4, "ngIf"], [3, "disabled", "value", 4, "ngFor", "ngForOf"], [3, "disabled", "hidden", "selected", "value"], [3, "disabled", "value"]], template: function PoSelectComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "select", 2, 3);
        i0.ɵɵlistener("blur", function PoSelectComponent_Template_select_blur_2_listener() { return ctx.onBlur(); })("change", function PoSelectComponent_Template_select_change_2_listener($event) { return ctx.onSelectChange($event.target.value); });
        i0.ɵɵtemplate(4, PoSelectComponent_option_4_Template, 2, 5, "option", 4);
        i0.ɵɵtemplate(5, PoSelectComponent_option_5_Template, 2, 3, "option", 5);
        i0.ɵɵelementEnd()();
        i0.ɵɵelement(6, "po-field-container-bottom");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("p-disabled", ctx.disabled)("p-help", ctx.help)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("po-select-placeholder", !ctx.selectedValue && !!ctx.placeholder);
        i0.ɵɵproperty("disabled", ctx.disabled)("id", ctx.id)("required", ctx.required);
        i0.ɵɵattribute("name", ctx.name);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.selectedValue || !!ctx.placeholder);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.options);
    } }, dependencies: [i1.NgForOf, i1.NgIf, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i3.PoFieldContainerBottomComponent, i4.PoFieldContainerComponent], encapsulation: 2, changeDetection: 0 });
__decorate([
    InputBoolean()
], PoSelectComponent.prototype, "readonly", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoSelectComponent, [{
        type: Component,
        args: [{ selector: 'po-select', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoSelectComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoSelectComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-help]=\"help\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <select\n      #select\n      class=\"po-select\"\n      [attr.name]=\"name\"\n      [class.po-select-placeholder]=\"!selectedValue && !!placeholder\"\n      [disabled]=\"disabled\"\n      [id]=\"id\"\n      [required]=\"required\"\n      (blur)=\"onBlur()\"\n      (change)=\"onSelectChange($event.target.value)\"\n    >\n      <option\n        *ngIf=\"!selectedValue || !!placeholder\"\n        [disabled]=\"!!placeholder\"\n        [hidden]=\"!selectedValue && !placeholder\"\n        [selected]=\"!selectedValue\"\n        [value]=\"placeholder ?? ''\"\n      >\n        {{ placeholder }}\n      </option>\n      <option *ngFor=\"let option of options\" [disabled]=\"readonly\" [value]=\"option?.[this.fieldValue]\">\n        {{ option?.[this.fieldLabel] }}\n      </option>\n    </select>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.IterableDiffers }, { type: i0.Renderer2 }]; }, { selectElement: [{
            type: ViewChild,
            args: ['select', { read: ElementRef, static: true }]
        }], ngModelChange: [{
            type: Output,
            args: ['ngModelChange']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }], placeholder: [{
            type: Input,
            args: ['p-placeholder']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], fieldLabel: [{
            type: Input,
            args: ['p-field-label']
        }], fieldValue: [{
            type: Input,
            args: ['p-field-value']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,