import { Component, ElementRef, forwardRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { formatBytes, isMobile, uuid } from '../../../utils/util';
import { PoI18nPipe } from '../../../services/po-i18n/po-i18n.pipe';
import { PoProgressStatus } from '../../po-progress/enums/po-progress-status.enum';
import { PoUploadBaseComponent } from './po-upload-base.component';
import { PoUploadDragDropComponent } from './po-upload-drag-drop/po-upload-drag-drop.component';
import { PoUploadService } from './po-upload.service';
import { PoUploadStatus } from './po-upload-status.enum';
import * as i0 from "@angular/core";
import * as i1 from "./po-upload.service";
import * as i2 from "../../../services/po-i18n/po-i18n.pipe";
import * as i3 from "../../../services/po-notification/po-notification.service";
import * as i4 from "../../../services/po-language/po-language.service";
import * as i5 from "@angular/common";
import * as i6 from "../../po-button/po-button.component";
import * as i7 from "../../po-container/po-container.component";
import * as i8 from "../po-field-container/po-field-container.component";
import * as i9 from "../../po-progress/po-progress.component";
import * as i10 from "./po-upload-drag-drop/po-upload-drag-drop.component";
import * as i11 from "./po-upload-file-restrictions/po-upload-file-restrictions.component";
const _c0 = ["inputFile"];
const _c1 = ["uploadButton"];
function PoUploadComponent_po_upload_drag_drop_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-upload-drag-drop", 10);
    i0.ɵɵlistener("p-file-change", function PoUploadComponent_po_upload_drag_drop_5_Template_po_upload_drag_drop_p_file_change_0_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.onFileChangeDragDrop($event)); })("p-select-files", function PoUploadComponent_po_upload_drag_drop_5_Template_po_upload_drag_drop_p_select_files_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.selectFiles()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-directory-compatible", ctx_r1.canHandleDirectory)("p-disabled", ctx_r1.isDisabled)("p-drag-drop-height", ctx_r1.dragDropHeight)("p-literals", ctx_r1.literals);
} }
function PoUploadComponent_po_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 11, 12);
    i0.ɵɵlistener("p-click", function PoUploadComponent_po_button_6_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.selectFiles()); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disabled", ctx_r2.isDisabled)("p-label", ctx_r2.selectFileButtonLabel);
} }
const _c2 = function (a0) { return { "po-upload-file-restrictions-drag-drop": a0 }; };
function PoUploadComponent_po_upload_file_restrictions_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-upload-file-restrictions", 13);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(5, _c2, ctx_r3.displayDragDrop))("p-allowed-extensions", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.allowedExtensions)("p-max-files", ctx_r3.maxFiles)("p-max-file-size", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.maxFileSize)("p-min-file-size", ctx_r3.fileRestrictions == null ? null : ctx_r3.fileRestrictions.minFileSize);
} }
function PoUploadComponent_div_8_po_progress_3_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-progress", 18);
    i0.ɵɵlistener("p-cancel", function PoUploadComponent_div_8_po_progress_3_Template_po_progress_p_cancel_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const file_r13 = restoredCtx.$implicit; const ctx_r14 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r14.cancel(file_r13)); })("p-retry", function PoUploadComponent_div_8_po_progress_3_Template_po_progress_p_retry_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const file_r13 = restoredCtx.$implicit; const ctx_r16 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r16.uploadFiles([file_r13])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r13 = ctx.$implicit;
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("p-info", ctx_r12.infoByUploadStatus[file_r13.status] == null ? null : ctx_r12.infoByUploadStatus[file_r13.status].text(file_r13.percent))("p-info-icon", ctx_r12.infoByUploadStatus[file_r13.status] == null ? null : ctx_r12.infoByUploadStatus[file_r13.status].icon)("p-status", ctx_r12.progressStatusByFileStatus[file_r13.status])("p-text", file_r13.displayName)("p-value", file_r13.percent);
} }
const _c3 = function (a0) { return { "po-upload-progress-container-area po-pt-2 po-pl-1": a0 }; };
function PoUploadComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14)(1, "po-container", 15)(2, "div", 16);
    i0.ɵɵtemplate(3, PoUploadComponent_div_8_po_progress_3_Template, 1, 5, "po-progress", 17);
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("p-height", ctx_r4.hasMoreThanFourItems ? 280 : "auto")("p-no-border", !ctx_r4.hasMoreThanFourItems)("p-no-padding", !ctx_r4.hasMoreThanFourItems);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(6, _c3, ctx_r4.hasMoreThanFourItems));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r4.currentFiles)("ngForTrackBy", ctx_r4.trackByFn);
} }
function PoUploadComponent_po_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-button", 19);
    i0.ɵɵlistener("p-click", function PoUploadComponent_po_button_9_Template_po_button_p_click_0_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r17.uploadFiles(ctx_r17.currentFiles)); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-mt-3", ctx_r5.hasMoreThanFourItems);
    i0.ɵɵproperty("p-disabled", ctx_r5.hasAnyFileUploading(ctx_r5.currentFiles))("p-label", ctx_r5.literals.startSending);
} }
/**
 * @docsExtends PoUploadBaseComponent
 *
 * @example
 *
 * <example name="po-upload-basic" title="PO Upload Basic">
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-labs" title="PO Upload Labs">
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-resume" title="PO Upload - Resume">
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-rs" title="PO Upload - Realize & Show">
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
 * </example>
 */
export class PoUploadComponent extends PoUploadBaseComponent {
    constructor(uploadService, renderer, i18nPipe, notification, cd, languageService) {
        super(uploadService, languageService);
        this.renderer = renderer;
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.cd = cd;
        this.id = `po-upload[${uuid()}]`;
        this.infoByUploadStatus = {
            [PoUploadStatus.Uploaded]: {
                text: () => this.literals.sentWithSuccess,
                icon: 'po-icon-ok'
            },
            [PoUploadStatus.Error]: {
                text: () => this.literals.errorOccurred
            },
            [PoUploadStatus.Uploading]: {
                text: percent => percent + '%'
            }
        };
        this.progressStatusByFileStatus = {
            [PoUploadStatus.Uploaded]: PoProgressStatus.Success,
            [PoUploadStatus.Error]: PoProgressStatus.Error
        };
        this.calledByCleanInputValue = false;
    }
    get displayDragDrop() {
        return this.dragDrop && !isMobile();
    }
    get displaySendButton() {
        const currentFiles = this.currentFiles || [];
        return !this.hideSendButton && !this.autoUpload && currentFiles.length > 0 && this.hasFileNotUploaded;
    }
    get selectFileButtonLabel() {
        if (this.canHandleDirectory) {
            return this.literals.selectFolder;
        }
        else if (this.isMultiple) {
            return this.literals.selectFiles;
        }
        else {
            return this.literals.selectFile;
        }
    }
    get hasMoreThanFourItems() {
        return this.currentFiles && this.currentFiles.length > 4;
    }
    get hasMultipleFiles() {
        return this.currentFiles && this.currentFiles.length > 1;
    }
    get hasFileNotUploaded() {
        if (Array.isArray(this.currentFiles)) {
            return this.currentFiles.some(file => file.status !== PoUploadStatus.Uploaded);
        }
        return false;
    }
    get isDisabled() {
        const currentFiles = this.currentFiles || [];
        return !!(this.hasAnyFileUploading(currentFiles) ||
            !this.url ||
            this.disabled ||
            this.isExceededFileLimit(currentFiles.length));
    }
    get maxFiles() {
        return this.isMultiple && this.fileRestrictions && this.fileRestrictions.maxFiles;
    }
    cancel(file) {
        if (file.status === PoUploadStatus.Uploading) {
            return this.stopUpload(file);
        }
        this.removeFile(file);
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
    clear() {
        this.currentFiles = undefined;
        this.updateModel([]);
        this.cleanInputValue();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            if (this.uploadButton) {
                this.uploadButton.focus();
                return;
            }
            if (this.displayDragDrop) {
                this.poUploadDragDropComponent.focus();
            }
        }
    }
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    hasAnyFileUploading(files) {
        if (files && files.length) {
            return files.some(file => file.status === PoUploadStatus.Uploading);
        }
        return false;
    }
    // retorna se o status do arquivo é diferente de enviado
    isAllowCancelEvent(status) {
        return status !== PoUploadStatus.Uploaded;
    }
    // Função disparada ao selecionar algum arquivo.
    onFileChange(event) {
        // necessário este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        const files = event.target.files;
        this.updateFiles(files);
        this.cleanInputValue();
    }
    onFileChangeDragDrop(files) {
        this.updateFiles(files);
    }
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    removeFile(file) {
        const index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel([...this.currentFiles]);
    }
    /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
    selectFiles() {
        this.onModelTouched?.();
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    }
    sendFeedback() {
        if (this.sizeNotAllowed > 0) {
            const minFileSize = formatBytes(this.fileRestrictions.minFileSize);
            const maxFileSize = formatBytes(this.fileRestrictions.maxFileSize);
            const args = [this.sizeNotAllowed, minFileSize || '0', maxFileSize];
            this.setPipeArguments('invalidSize', args);
            this.sizeNotAllowed = 0;
        }
        if (this.extensionNotAllowed > 0) {
            const allowedExtensionsFormatted = this.fileRestrictions.allowedExtensions.join(', ').toUpperCase();
            const args = [this.extensionNotAllowed, allowedExtensionsFormatted];
            this.setPipeArguments('invalidFormat', args);
            this.extensionNotAllowed = 0;
        }
        if (this.quantityNotAllowed > 0) {
            const args = [this.quantityNotAllowed];
            this.setPipeArguments('invalidAmount', args);
            this.quantityNotAllowed = 0;
        }
    }
    /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
    sendFiles() {
        if (this.currentFiles && this.currentFiles.length) {
            this.uploadFiles(this.currentFiles);
        }
    }
    setDirectoryAttribute(canHandleDirectory) {
        if (canHandleDirectory) {
            this.renderer.setAttribute(this.inputFile.nativeElement, 'webkitdirectory', 'true');
        }
        else {
            this.renderer.removeAttribute(this.inputFile.nativeElement, 'webkitdirectory');
        }
    }
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    stopUpload(file) {
        this.uploadService.stopRequestByFile(file, () => {
            if (this.autoUpload) {
                this.removeFile(file);
            }
            else {
                this.stopUploadHandler(file);
            }
            this.cd.markForCheck();
        });
    }
    trackByFn(index, file) {
        return file.uid;
    }
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    uploadFiles(files) {
        const filesFiltered = files.filter(file => file.status !== PoUploadStatus.Uploaded);
        this.uploadService.upload(this.url, filesFiltered, this.headers, this.onUpload, (file, percent) => {
            // UPLOADING
            this.uploadingHandler(file, percent);
        }, (file, eventResponse) => {
            // SUCCESS
            this.responseHandler(file, PoUploadStatus.Uploaded);
            this.onSuccess.emit(eventResponse);
        }, (file, eventError) => {
            // Error
            this.responseHandler(file, PoUploadStatus.Error);
            this.onError.emit(eventError);
        });
    }
    cleanInputValue() {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
    }
    // função disparada na resposta do sucesso ou error
    responseHandler(file, status) {
        file.status = status;
        file.percent = 100;
        this.cd.markForCheck();
    }
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    setPipeArguments(literalAttributes, literalArguments) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], literalArguments);
        this.notification.information(pipeArguments);
    }
    // Função disparada ao parar um envio de arquivo.
    stopUploadHandler(file) {
        file.status = PoUploadStatus.None;
        file.percent = 0;
        this.cd.markForCheck();
    }
    updateFiles(files) {
        this.currentFiles = this.parseFiles(files);
        this.updateModel([...this.currentFiles]);
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    }
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    updateModel(files) {
        const modelFiles = this.mapCleanUploadFiles(files);
        this.onModelChange ? this.onModelChange(modelFiles) : this.ngModelChange.emit(modelFiles);
    }
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    uploadingHandler(file, percent) {
        file.status = PoUploadStatus.Uploading;
        file.percent = percent;
        this.cd.markForCheck();
    }
    // retorna os objetos do array sem as propriedades: percent e displayName
    mapCleanUploadFiles(files) {
        const mapedByUploadFile = progressFile => {
            const { percent, displayName, ...uploadFile } = progressFile;
            return uploadFile;
        };
        return files.map(mapedByUploadFile);
    }
}
PoUploadComponent.ɵfac = function PoUploadComponent_Factory(t) { return new (t || PoUploadComponent)(i0.ɵɵdirectiveInject(i1.PoUploadService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.PoI18nPipe), i0.ɵɵdirectiveInject(i3.PoNotificationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.PoLanguageService)); };
PoUploadComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoUploadComponent, selectors: [["po-upload"]], viewQuery: function PoUploadComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, ElementRef);
        i0.ɵɵviewQuery(PoUploadDragDropComponent, 5);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputFile = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.poUploadDragDropComponent = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.uploadButton = _t.first);
    } }, features: [i0.ɵɵProvidersFeature([
            PoI18nPipe,
            PoUploadService,
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoUploadComponent),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoUploadComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 10, vars: 18, consts: [[3, "p-disabled", "p-help", "p-id", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-upload"], ["type", "file", 1, "po-upload-input", 3, "accept", "disabled", "id", "multiple", "required", "change"], ["inputFile", ""], [3, "p-directory-compatible", "p-disabled", "p-drag-drop-height", "p-literals", "p-file-change", "p-select-files", 4, "ngIf"], ["class", "po-upload-button", "for", "file", 3, "p-disabled", "p-label", "p-click", 4, "ngIf"], ["class", "po-upload-file-restrictions", 3, "ngClass", "p-allowed-extensions", "p-max-files", "p-max-file-size", "p-min-file-size", 4, "ngIf"], ["class", "po-upload-progress-container", 4, "ngIf"], ["class", "po-upload-send-button", "p-kind", "primary", 3, "po-mt-3", "p-disabled", "p-label", "p-click", 4, "ngIf"], [3, "p-directory-compatible", "p-disabled", "p-drag-drop-height", "p-literals", "p-file-change", "p-select-files"], ["for", "file", 1, "po-upload-button", 3, "p-disabled", "p-label", "p-click"], ["uploadButton", ""], [1, "po-upload-file-restrictions", 3, "ngClass", "p-allowed-extensions", "p-max-files", "p-max-file-size", "p-min-file-size"], [1, "po-upload-progress-container"], ["p-no-shadow", "", 3, "p-height", "p-no-border", "p-no-padding"], [3, "ngClass"], [3, "p-info", "p-info-icon", "p-status", "p-text", "p-value", "p-cancel", "p-retry", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "p-info", "p-info-icon", "p-status", "p-text", "p-value", "p-cancel", "p-retry"], ["p-kind", "primary", 1, "po-upload-send-button", 3, "p-disabled", "p-label", "p-click"]], template: function PoUploadComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2)(3, "input", 3, 4);
        i0.ɵɵlistener("change", function PoUploadComponent_Template_input_change_3_listener($event) { return ctx.onFileChange($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, PoUploadComponent_po_upload_drag_drop_5_Template, 1, 4, "po-upload-drag-drop", 5);
        i0.ɵɵtemplate(6, PoUploadComponent_po_button_6_Template, 2, 2, "po-button", 6);
        i0.ɵɵtemplate(7, PoUploadComponent_po_upload_file_restrictions_7_Template, 1, 7, "po-upload-file-restrictions", 7);
        i0.ɵɵtemplate(8, PoUploadComponent_div_8_Template, 4, 8, "div", 8);
        i0.ɵɵtemplate(9, PoUploadComponent_po_button_9_Template, 1, 4, "po-button", 9);
        i0.ɵɵelementEnd()()();
    } if (rf & 2) {
        i0.ɵɵproperty("p-disabled", ctx.isDisabled)("p-help", ctx.help)("p-id", ctx.id)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("accept", ctx.allowedExtensions)("disabled", ctx.isDisabled)("id", ctx.id)("multiple", ctx.isMultiple)("required", ctx.required);
        i0.ɵɵattribute("name", ctx.name);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.displayDragDrop);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.hideSelectButton && !ctx.displayDragDrop);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.fileRestrictions && !ctx.hideRestrictionsInfo);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.currentFiles && ctx.currentFiles.length);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.displaySendButton);
    } }, dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i6.PoButtonComponent, i7.PoContainerComponent, i8.PoFieldContainerComponent, i9.PoProgressComponent, i10.PoUploadDragDropComponent, i11.PoUploadFileRestrictionsComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoUploadComponent, [{
        type: Component,
        args: [{ selector: 'po-upload', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    PoI18nPipe,
                    PoUploadService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoUploadComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoUploadComponent),
                        multi: true
                    }
                ], template: "<po-field-container\n  [p-disabled]=\"isDisabled\"\n  [p-help]=\"help\"\n  [p-id]=\"id\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\">\n    <div class=\"po-upload\">\n      <input\n        #inputFile\n        class=\"po-upload-input\"\n        type=\"file\"\n        [accept]=\"allowedExtensions\"\n        [attr.name]=\"name\"\n        [disabled]=\"isDisabled\"\n        [id]=\"id\"\n        [multiple]=\"isMultiple\"\n        [required]=\"required\"\n        (change)=\"onFileChange($event)\"\n      />\n\n      <po-upload-drag-drop\n        *ngIf=\"displayDragDrop\"\n        [p-directory-compatible]=\"canHandleDirectory\"\n        [p-disabled]=\"isDisabled\"\n        [p-drag-drop-height]=\"dragDropHeight\"\n        [p-literals]=\"literals\"\n        (p-file-change)=\"onFileChangeDragDrop($event)\"\n        (p-select-files)=\"selectFiles()\"\n      >\n      </po-upload-drag-drop>\n\n      <po-button\n        *ngIf=\"!hideSelectButton && !displayDragDrop\"\n        #uploadButton\n        class=\"po-upload-button\"\n        for=\"file\"\n        [p-disabled]=\"isDisabled\"\n        [p-label]=\"selectFileButtonLabel\"\n        (p-click)=\"selectFiles()\"\n      >\n      </po-button>\n\n      <po-upload-file-restrictions\n        *ngIf=\"fileRestrictions && !hideRestrictionsInfo\"\n        class=\"po-upload-file-restrictions\"\n        [ngClass]=\"{ 'po-upload-file-restrictions-drag-drop': displayDragDrop }\"\n        [p-allowed-extensions]=\"fileRestrictions?.allowedExtensions\"\n        [p-max-files]=\"maxFiles\"\n        [p-max-file-size]=\"fileRestrictions?.maxFileSize\"\n        [p-min-file-size]=\"fileRestrictions?.minFileSize\"\n      >\n      </po-upload-file-restrictions>\n\n      <div *ngIf=\"currentFiles && currentFiles.length\" class=\"po-upload-progress-container\">\n        <po-container\n          p-no-shadow\n          [p-height]=\"hasMoreThanFourItems ? 280 : 'auto'\"\n          [p-no-border]=\"!hasMoreThanFourItems\"\n          [p-no-padding]=\"!hasMoreThanFourItems\"\n        >\n          <div [ngClass]=\"{ 'po-upload-progress-container-area po-pt-2 po-pl-1': hasMoreThanFourItems }\">\n            <po-progress\n              *ngFor=\"let file of currentFiles; trackBy: trackByFn\"\n              [p-info]=\"infoByUploadStatus[file.status]?.text(file.percent)\"\n              [p-info-icon]=\"infoByUploadStatus[file.status]?.icon\"\n              [p-status]=\"progressStatusByFileStatus[file.status]\"\n              [p-text]=\"file.displayName\"\n              [p-value]=\"file.percent\"\n              (p-cancel)=\"cancel(file)\"\n              (p-retry)=\"uploadFiles([file])\"\n            >\n            </po-progress>\n          </div>\n        </po-container>\n      </div>\n\n      <po-button\n        *ngIf=\"displaySendButton\"\n        class=\"po-upload-send-button\"\n        [class.po-mt-3]=\"hasMoreThanFourItems\"\n        p-kind=\"primary\"\n        [p-disabled]=\"hasAnyFileUploading(currentFiles)\"\n        [p-label]=\"literals.startSending\"\n        (p-click)=\"uploadFiles(currentFiles)\"\n      >\n      </po-button>\n    </div>\n  </div>\n</po-field-container>\n" }]
    }], function () { return [{ type: i1.PoUploadService }, { type: i0.Renderer2 }, { type: i2.PoI18nPipe }, { type: i3.PoNotificationService }, { type: i0.ChangeDetectorRef }, { type: i4.PoLanguageService }]; }, { inputFile: [{
            type: ViewChild,
            args: ['inputFile', { read: ElementRef, static: true }]
        }], poUploadDragDropComponent: [{
            type: ViewChild,
            args: [PoUploadDragDropComponent]
        }], uploadButton: [{
            type: ViewChild,
            args: ['uploadButton']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,