import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { capitalizeFirstLetter, convertToInt } from '../../../utils/util';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
import { poLocaleDefault } from '../../../services/po-language/po-language.constant';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/po-language/po-language.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "../../po-button/po-button.component";
import * as i5 from "../../po-popover/po-popover.component";
import * as i6 from "../po-table-list-manager/po-table-list-manager.component";
function PoTableColumnManagerComponent_po_popover_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-popover", 1, 2);
    i0.ɵɵlistener("p-close", function PoTableColumnManagerComponent_po_popover_0_Template_po_popover_p_close_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.checkChanges([], true)); });
    i0.ɵɵelementStart(2, "div", 3)(3, "div", 4);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "div", 5)(6, "button", 6);
    i0.ɵɵlistener("click", function PoTableColumnManagerComponent_po_popover_0_Template_button_click_6_listener() { i0.ɵɵrestoreView(_r3); const _r1 = i0.ɵɵreference(1); return i0.ɵɵresetView(_r1.close()); });
    i0.ɵɵelementEnd()()();
    i0.ɵɵelementStart(7, "div", 7)(8, "po-table-list-manager", 8);
    i0.ɵɵlistener("ngModelChange", function PoTableColumnManagerComponent_po_popover_0_Template_po_table_list_manager_ngModelChange_8_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.visibleColumns = $event); })("p-change", function PoTableColumnManagerComponent_po_popover_0_Template_po_table_list_manager_p_change_8_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.checkChanges($event, false)); })("p-change-position", function PoTableColumnManagerComponent_po_popover_0_Template_po_table_list_manager_p_change_position_8_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.changePosition($event)); });
    i0.ɵɵelementEnd()();
    i0.ɵɵelementStart(9, "div", 9)(10, "po-button", 10);
    i0.ɵɵlistener("p-click", function PoTableColumnManagerComponent_po_popover_0_Template_po_button_p_click_10_listener() { i0.ɵɵrestoreView(_r3); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.restore()); });
    i0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-target", ctx_r0.target);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r0.literals.columnsManager);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngModel", ctx_r0.visibleColumns)("p-options", ctx_r0.columnsOptions)("p-columns-manager", ctx_r0.columns);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("p-label", ctx_r0.literals.restoreDefault);
} }
const PoTableColumnManagerMaxColumnsDefault = 99999;
export const poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
export class PoTableColumnManagerComponent {
    constructor(renderer, languageService) {
        this.renderer = renderer;
        this.columns = [];
        this.lastVisibleColumnsSelected = [];
        this.visibleColumnsChange = new EventEmitter();
        // Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.
        // O po-table envia como parâmetro um array de string com as colunas visíveis atualizadas. Por exemplo: ["idCard", "name", "hireStatus", "age"].
        this.changeVisibleColumns = new EventEmitter();
        this.initialColumns = new EventEmitter();
        this.columnsOptions = [];
        this.visibleColumns = [];
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.defaultColumns = [];
        this.minColumns = 1;
        const language = languageService.getShortLanguage();
        this.literals = {
            ...poTableColumnManagerLiteralsDefault[poLocaleDefault],
            ...poTableColumnManagerLiteralsDefault[language]
        };
    }
    set maxColumns(value) {
        this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
    }
    get maxColumns() {
        return this._maxColumns;
    }
    ngOnChanges(changes) {
        const { columns, maxColumns, target } = changes;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateValues(this.columns);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    // aqui chegam os eventos do checkbox e do close do popover que também é disparado no resize
    checkChanges(event = [], emit = false) {
        this.verifyToEmitChange(event);
        if (emit) {
            // controla emissões para o dev
            this.verifyToEmitVisibleColumns();
        }
    }
    restore() {
        this.restoreDefaultEvent = true;
        const defaultColumns = this.getVisibleColumns(this.defaultColumns);
        this.initialColumns.emit(this.getVisibleColumns(this.colunsDefault));
        this.checkChanges(defaultColumns, this.restoreDefaultEvent);
    }
    changePosition({ option, direction }) {
        const indexColumn = this.columns.findIndex(el => el.property === option.value);
        const newColumn = [...this.columns];
        this.changePositionColumn(newColumn, indexColumn, direction);
        this.columns = newColumn;
        this.visibleColumnsChange.emit(this.columns);
    }
    changePositionColumn(array, index, direction) {
        if (direction === 'up') {
            array.splice(index, 0, array.splice(index - 1, 1)[0]);
        }
        if (direction === 'down') {
            array.splice(index, 0, array.splice(index + 1, 1)[0]);
        }
    }
    verifyToEmitChange(event) {
        const newColumns = [...event];
        if (newColumns.length >= 1 && this.allowsChangeVisibleColumns()) {
            this.emitChangesToSelectedColumns(newColumns);
        }
        // Desabilita ultimo checkbox ativo
        if (newColumns.length === 1) {
            const columnsOptions = this.mapTableColumnsToCheckboxOptions(this.columnUpdate);
            this.columnsOptions = this.disabledLastColumn(columnsOptions);
        }
    }
    emitChangesToSelectedColumns(newColumns) {
        this.visibleColumns = [...newColumns];
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        // emite alteração nas colunas selecionadas, porém não emite para o dev.
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    allowsChangeVisibleColumns() {
        const visibleTableColumns = this.getVisibleTableColumns(this.visibleColumns);
        return this.stringify(visibleTableColumns) !== this.stringify(this.columns);
    }
    verifyToEmitVisibleColumns() {
        if (this.restoreDefaultEvent) {
            // veio do restore default
            this.verifyRestoreValues();
        }
        else {
            // foi disparado no close popover;
            this.verifyOnClose();
        }
    }
    verifyRestoreValues() {
        const defaultColumns = [...this.defaultColumns];
        const defaultVisibleColumns = this.getVisibleColumns(defaultColumns);
        if (this.allowsChangeSelectedColumns(defaultVisibleColumns)) {
            this.visibleColumnsChange.emit(this.defaultColumns);
        }
        this.restoreDefaultEvent = false;
    }
    allowsChangeSelectedColumns(defaultVisibleColumns) {
        const visibleColumns = this.getVisibleColumns(this.columns);
        return !this.isEqualArrays(defaultVisibleColumns, visibleColumns);
    }
    verifyOnClose() {
        if (this.allowsEmission()) {
            this.emitVisibleColumns();
        }
    }
    emitVisibleColumns() {
        this.lastEmittedValue = [...this.visibleColumns];
        this.changeVisibleColumns.emit(this.visibleColumns);
    }
    allowsEmission() {
        const updatedVisibleColumns = this.visibleColumns ? [...this.visibleColumns] : [];
        const lastEmittedValue = this.lastEmittedValue ? [...this.lastEmittedValue] : [];
        const lastVisibleColumnsSelected = this.lastVisibleColumnsSelected ? [...this.lastVisibleColumnsSelected] : [];
        const lastVisibleColumns = this.getVisibleColumns(lastVisibleColumnsSelected);
        return (this.isUpdate(updatedVisibleColumns, lastEmittedValue) ||
            this.isFirstTime(updatedVisibleColumns, lastVisibleColumns));
    }
    isFirstTime(updatedVisibleColumns, lastVisibleColumns) {
        return !this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastVisibleColumns);
    }
    isUpdate(updatedVisibleColumns, lastEmittedValue) {
        return this.lastEmittedValue && !this.isEqualArrays(updatedVisibleColumns, lastEmittedValue);
    }
    isEqualArrays(first, second) {
        const one = first ? [...first] : [];
        const two = second ? [...second] : [];
        const firstSort = one.slice();
        const secondSort = two.slice();
        const firstString = JSON.stringify(firstSort);
        const secondString = JSON.stringify(secondSort);
        return firstString === secondString;
    }
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    disableColumnsOptions(columns = []) {
        return columns.map(column => ({
            ...column,
            disabled: this.isDisableColumn(column.value)
        }));
    }
    getColumnTitleLabel(column) {
        return column.label || capitalizeFirstLetter(column.property);
    }
    /** Retorna um Array de column.property das colunas que são visiveis. */
    getVisibleColumns(columns) {
        let visibleColumns = [];
        columns.forEach(column => {
            if (this.isVisibleColumn(column, visibleColumns)) {
                visibleColumns = [...visibleColumns, column.property];
            }
        });
        return visibleColumns;
    }
    isVisibleColumn(column, visibleColumns) {
        return column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail';
    }
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    getVisibleTableColumns(visibleColumns) {
        const columns = this.columns ? [...this.columns] : [];
        return columns.map(column => ({
            ...column,
            visible: visibleColumns.includes(column.property) || column.type === 'detail'
        }));
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            if (this.popover && !this.popover.isHidden) {
                this.popover.close();
            }
        });
    }
    isDisableColumn(property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    }
    mapTableColumnsToCheckboxOptions(columns = []) {
        const tableColumns = [...columns];
        const columnsOptions = [];
        tableColumns.forEach(column => {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: this.getColumnTitleLabel(column),
                    disabled: this.isDisableColumn(column.property),
                    visible: column.visible
                });
            }
        });
        return columnsOptions;
    }
    disabledLastColumn(columns) {
        return columns.map(column => ({
            ...column,
            disabled: column.type !== 'detail' && column.visible ? true : false
        }));
    }
    onChangeColumns(columns) {
        const { currentValue = [], previousValue = [] } = columns;
        this.columnUpdate = columns.currentValue;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (!this.lastVisibleColumnsSelected && this.stringify(this.defaultColumns) !== this.stringify(currentValue)) {
            this.defaultColumns = [...currentValue];
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (this.stringify(previousValue) !== this.stringify(currentValue)) {
            this.updateValues(currentValue);
        }
    }
    updateValues(currentValue) {
        const visibleColumns = this.getVisibleColumns(currentValue);
        this.visibleColumns = [...visibleColumns];
        const columnsOptions = this.mapTableColumnsToCheckboxOptions(currentValue);
        this.columnsOptions = this.disableColumnsOptions(columnsOptions);
        this.checkChanges(visibleColumns, false);
    }
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    stringify(columns) {
        // não faz o stringify da propriedade icon e searchService, pois pode conter objeto complexo e disparar um erro.
        return JSON.stringify(columns, (key, value) => {
            if (key !== 'icon' && key !== 'searchService') {
                return value;
            }
        });
    }
}
PoTableColumnManagerComponent.ɵfac = function PoTableColumnManagerComponent_Factory(t) { return new (t || PoTableColumnManagerComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoTableColumnManagerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoTableColumnManagerComponent, selectors: [["po-table-column-manager"]], viewQuery: function PoTableColumnManagerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(PoPopoverComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popover = _t.first);
    } }, inputs: { columns: ["p-columns", "columns"], target: ["p-target", "target"], colunsDefault: ["p-columns-default", "colunsDefault"], lastVisibleColumnsSelected: ["p-last-visible-columns-selected", "lastVisibleColumnsSelected"], maxColumns: ["p-max-columns", "maxColumns"] }, outputs: { visibleColumnsChange: "p-visible-columns-change", changeVisibleColumns: "p-change-visible-columns", initialColumns: "p-initial-columns" }, features: [i0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["p-position", "bottom-left", 3, "p-target", "p-close", 4, "ngIf"], ["p-position", "bottom-left", 3, "p-target", "p-close"], ["popover", ""], [1, "po-table-column-manager-header"], [1, "po-table-column-manager-header-title"], [1, "po-table-column-manager-header-close"], [1, "po-table-column-manager-header-close-button", "po-clickable", "po-icon", "po-icon-close", 3, "click"], [1, "po-table-column-manager-body"], ["name", "visibleColumns", "p-columns", "1", 3, "ngModel", "p-options", "p-columns-manager", "ngModelChange", "p-change", "p-change-position"], [1, "po-table-column-manager-footer"], ["p-kind", "tertiary", 1, "po-table-column-manager-footer-restore", 3, "p-label", "p-click"]], template: function PoTableColumnManagerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, PoTableColumnManagerComponent_po_popover_0_Template, 11, 6, "po-popover", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.target);
    } }, dependencies: [i2.NgIf, i3.NgControlStatus, i3.NgModel, i4.PoButtonComponent, i5.PoPopoverComponent, i6.PoTableListManagerComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTableColumnManagerComponent, [{
        type: Component,
        args: [{ selector: 'po-table-column-manager', template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\" (p-close)=\"checkChanges([], true)\">\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button\n        class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\"\n        (click)=\"popover.close()\"\n      ></button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-table-list-manager\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"checkChanges($event, false)\"\n      (p-change-position)=\"changePosition($event)\"\n      [p-columns-manager]=\"columns\"\n    >\n    </po-table-list-manager>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-kind=\"tertiary\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\"\n    >\n    </po-button>\n  </div>\n</po-popover>\n" }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i1.PoLanguageService }]; }, { popover: [{
            type: ViewChild,
            args: [PoPopoverComponent]
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], target: [{
            type: Input,
            args: ['p-target']
        }], colunsDefault: [{
            type: Input,
            args: ['p-columns-default']
        }], lastVisibleColumnsSelected: [{
            type: Input,
            args: ['p-last-visible-columns-selected']
        }], visibleColumnsChange: [{
            type: Output,
            args: ['p-visible-columns-change']
        }], changeVisibleColumns: [{
            type: Output,
            args: ['p-change-visible-columns']
        }], initialColumns: [{
            type: Output,
            args: ['p-initial-columns']
        }], maxColumns: [{
            type: Input,
            args: ['p-max-columns']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLW1hbmFnZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRhYmxlL3BvLXRhYmxlLWNvbHVtbi1tYW5hZ2VyL3BvLXRhYmxlLWNvbHVtbi1tYW5hZ2VyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4tbWFuYWdlci9wby10YWJsZS1jb2x1bW4tbWFuYWdlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUlOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFMUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFFM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9EQUFvRCxDQUFDOzs7Ozs7Ozs7O0lDbEJyRix3Q0FBb0g7SUFBbkMseUxBQVcsZUFBQSx3QkFBaUIsSUFBSSxDQUFDLENBQUEsSUFBQztJQUNqSCw4QkFBNEMsYUFBQTtJQUNRLFlBQTZCO0lBQUEsaUJBQU07SUFFckYsOEJBQWtELGdCQUFBO0lBRzlDLDZLQUFTLGVBQUEsV0FBZSxDQUFBLElBQUM7SUFDMUIsaUJBQVMsRUFBQSxFQUFBO0lBSWQsOEJBQTBDLCtCQUFBO0lBR3RDLHdRQUE0QiwrTEFHaEIsZUFBQSw0QkFBcUIsS0FBSyxDQUFDLENBQUEsSUFIWCxpTkFJUCxlQUFBLDZCQUFzQixDQUFBLElBSmY7SUFPOUIsaUJBQXdCLEVBQUE7SUFHMUIsOEJBQTRDLHFCQUFBO0lB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QTZCO3VCQUM3QixrQkFBa0I7Ozs7O1FDakQvQiw2RkFrQ2E7O1FBbENTLGlDQUFZOzt1RkRnRHJCLDZCQUE2QjtjQUp6QyxTQUFTOzJCQUNFLHlCQUF5Qjs0RkFJSixPQUFPO2tCQUFyQyxTQUFTO21CQUFDLGtCQUFrQjtZQUVULE9BQU87a0JBQTFCLEtBQUs7bUJBQUMsV0FBVztZQUVDLE1BQU07a0JBQXhCLEtBQUs7bUJBQUMsVUFBVTtZQUVXLGFBQWE7a0JBQXhDLEtBQUs7bUJBQUMsbUJBQW1CO1lBRWdCLDBCQUEwQjtrQkFBbkUsS0FBSzttQkFBQyxpQ0FBaUM7WUFFSixvQkFBb0I7a0JBQXZELE1BQU07bUJBQUMsMEJBQTBCO1lBSUUsb0JBQW9CO2tCQUF2RCxNQUFNO21CQUFDLDBCQUEwQjtZQUVMLGNBQWM7a0JBQTFDLE1BQU07bUJBQUMsbUJBQW1CO1lBY0MsVUFBVTtrQkFBckMsS0FBSzttQkFBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2UsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIsIGNvbnZlcnRUb0ludCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9DaGVja2JveEdyb3VwT3B0aW9uIH0gZnJvbSAnLi4vLi4vcG8tZmllbGQvcG8tY2hlY2tib3gtZ3JvdXAvaW50ZXJmYWNlcy9wby1jaGVja2JveC1ncm91cC1vcHRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUG9wb3ZlckNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3BvLXBvcG92ZXIvcG8tcG9wb3Zlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLmNvbnN0YW50JztcbmltcG9ydCB7IFBvVGFibGVDb2x1bW4gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXRhYmxlLWNvbHVtbi5pbnRlcmZhY2UnO1xuXG5jb25zdCBQb1RhYmxlQ29sdW1uTWFuYWdlck1heENvbHVtbnNEZWZhdWx0ID0gOTk5OTk7XG5cbmV4cG9ydCBjb25zdCBwb1RhYmxlQ29sdW1uTWFuYWdlckxpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IHtcbiAgICBjb2x1bW5zTWFuYWdlcjogJ0NvbHVtbnMgbWFuYWdlcicsXG4gICAgcmVzdG9yZURlZmF1bHQ6ICdSZXN0b3JlIGRlZmF1bHQnXG4gIH0sXG4gIGVzOiB7XG4gICAgY29sdW1uc01hbmFnZXI6ICdHZXJlbnRlIGRlIGNvbHVtbmEnLFxuICAgIHJlc3RvcmVEZWZhdWx0OiAnUmVzdGF1cmFyIHBvciBkZWZlY3RvJ1xuICB9LFxuICBwdDoge1xuICAgIGNvbHVtbnNNYW5hZ2VyOiAnR2VyZW5jaWFkb3IgZGUgY29sdW5hcycsXG4gICAgcmVzdG9yZURlZmF1bHQ6ICdSZXN0YXVyYXIgcGFkcsOjbydcbiAgfSxcbiAgcnU6IHtcbiAgICBjb2x1bW5zTWFuYWdlcjogJ9C80LXQvdC10LTQttC10YAg0LrQvtC70L7QvdC+0LonLFxuICAgIHJlc3RvcmVEZWZhdWx0OiAn0YHQsdGA0L7RgSDQvdCw0YHRgtGA0L7QtdC6J1xuICB9XG59O1xuXG50eXBlIERpcmVjdGlvbiA9ICd1cCcgfCAnZG93bic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRhYmxlLWNvbHVtbi1tYW5hZ2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRhYmxlLWNvbHVtbi1tYW5hZ2VyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RhYmxlQ29sdW1uTWFuYWdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZChQb1BvcG92ZXJDb21wb25lbnQpIHBvcG92ZXI6IFBvUG9wb3ZlckNvbXBvbmVudDtcblxuICBASW5wdXQoJ3AtY29sdW1ucycpIGNvbHVtbnM6IEFycmF5PFBvVGFibGVDb2x1bW4+ID0gW107XG5cbiAgQElucHV0KCdwLXRhcmdldCcpIHRhcmdldDogRWxlbWVudFJlZjtcblxuICBASW5wdXQoJ3AtY29sdW1ucy1kZWZhdWx0JykgY29sdW5zRGVmYXVsdDogQXJyYXk8UG9UYWJsZUNvbHVtbj47XG5cbiAgQElucHV0KCdwLWxhc3QtdmlzaWJsZS1jb2x1bW5zLXNlbGVjdGVkJykgbGFzdFZpc2libGVDb2x1bW5zU2VsZWN0ZWQ6IEFycmF5PFBvVGFibGVDb2x1bW4+ID0gW107XG5cbiAgQE91dHB1dCgncC12aXNpYmxlLWNvbHVtbnMtY2hhbmdlJykgdmlzaWJsZUNvbHVtbnNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPEFycmF5PFBvVGFibGVDb2x1bW4+PigpO1xuXG4gIC8vIEV2ZW50byBkaXNwYXJhZG8gYW8gZmVjaGFyIG8gcG9wb3ZlciBkbyBnZXJlbmNpYWRvciBkZSBjb2x1bmFzIGFww7NzIGFsdGVyYXIgYXMgY29sdW5hcyB2aXPDrXZlaXMuXG4gIC8vIE8gcG8tdGFibGUgZW52aWEgY29tbyBwYXLDom1ldHJvIHVtIGFycmF5IGRlIHN0cmluZyBjb20gYXMgY29sdW5hcyB2aXPDrXZlaXMgYXR1YWxpemFkYXMuIFBvciBleGVtcGxvOiBbXCJpZENhcmRcIiwgXCJuYW1lXCIsIFwiaGlyZVN0YXR1c1wiLCBcImFnZVwiXS5cbiAgQE91dHB1dCgncC1jaGFuZ2UtdmlzaWJsZS1jb2x1bW5zJykgY2hhbmdlVmlzaWJsZUNvbHVtbnMgPSBuZXcgRXZlbnRFbWl0dGVyPEFycmF5PHN0cmluZz4+KCk7XG5cbiAgQE91dHB1dCgncC1pbml0aWFsLWNvbHVtbnMnKSBpbml0aWFsQ29sdW1ucyA9IG5ldyBFdmVudEVtaXR0ZXI8QXJyYXk8U3RyaW5nPj4oKTtcblxuICBsaXRlcmFscztcbiAgY29sdW1uc09wdGlvbnM6IEFycmF5PFBvQ2hlY2tib3hHcm91cE9wdGlvbj4gPSBbXTtcbiAgdmlzaWJsZUNvbHVtbnM6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgY29sdW1uVXBkYXRlO1xuXG4gIHByaXZhdGUgX21heENvbHVtbnM6IG51bWJlciA9IFBvVGFibGVDb2x1bW5NYW5hZ2VyTWF4Q29sdW1uc0RlZmF1bHQ7XG4gIHByaXZhdGUgZGVmYXVsdENvbHVtbnM6IEFycmF5PFBvVGFibGVDb2x1bW4+ID0gW107XG4gIHByaXZhdGUgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG4gIHByaXZhdGUgcmVzdG9yZURlZmF1bHRFdmVudDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBsYXN0RW1pdHRlZFZhbHVlOiBBcnJheTxzdHJpbmc+O1xuICBwcml2YXRlIG1pbkNvbHVtbnM6IG51bWJlciA9IDE7XG5cbiAgQElucHV0KCdwLW1heC1jb2x1bW5zJykgc2V0IG1heENvbHVtbnModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX21heENvbHVtbnMgPSBjb252ZXJ0VG9JbnQodmFsdWUsIFBvVGFibGVDb2x1bW5NYW5hZ2VyTWF4Q29sdW1uc0RlZmF1bHQpO1xuICB9XG5cbiAgZ2V0IG1heENvbHVtbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21heENvbHVtbnM7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IGxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG5cbiAgICB0aGlzLmxpdGVyYWxzID0ge1xuICAgICAgLi4ucG9UYWJsZUNvbHVtbk1hbmFnZXJMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcbiAgICAgIC4uLnBvVGFibGVDb2x1bW5NYW5hZ2VyTGl0ZXJhbHNEZWZhdWx0W2xhbmd1YWdlXVxuICAgIH07XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgY29uc3QgeyBjb2x1bW5zLCBtYXhDb2x1bW5zLCB0YXJnZXQgfSA9IGNoYW5nZXM7XG5cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5maXJzdENoYW5nZSkge1xuICAgICAgdGhpcy5pbml0aWFsaXplTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbHVtbnMpIHtcbiAgICAgIHRoaXMub25DaGFuZ2VDb2x1bW5zKGNvbHVtbnMpO1xuICAgIH1cblxuICAgIGlmIChtYXhDb2x1bW5zKSB7XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlcyh0aGlzLmNvbHVtbnMpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gIH1cblxuICAvLyBhcXVpIGNoZWdhbSBvcyBldmVudG9zIGRvIGNoZWNrYm94IGUgZG8gY2xvc2UgZG8gcG9wb3ZlciBxdWUgdGFtYsOpbSDDqSBkaXNwYXJhZG8gbm8gcmVzaXplXG4gIGNoZWNrQ2hhbmdlcyhldmVudDogQXJyYXk8c3RyaW5nPiA9IFtdLCBlbWl0OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICB0aGlzLnZlcmlmeVRvRW1pdENoYW5nZShldmVudCk7XG5cbiAgICBpZiAoZW1pdCkge1xuICAgICAgLy8gY29udHJvbGEgZW1pc3PDtWVzIHBhcmEgbyBkZXZcbiAgICAgIHRoaXMudmVyaWZ5VG9FbWl0VmlzaWJsZUNvbHVtbnMoKTtcbiAgICB9XG4gIH1cblxuICByZXN0b3JlKCkge1xuICAgIHRoaXMucmVzdG9yZURlZmF1bHRFdmVudCA9IHRydWU7XG4gICAgY29uc3QgZGVmYXVsdENvbHVtbnMgPSB0aGlzLmdldFZpc2libGVDb2x1bW5zKHRoaXMuZGVmYXVsdENvbHVtbnMpO1xuICAgIHRoaXMuaW5pdGlhbENvbHVtbnMuZW1pdCh0aGlzLmdldFZpc2libGVDb2x1bW5zKHRoaXMuY29sdW5zRGVmYXVsdCkpO1xuICAgIHRoaXMuY2hlY2tDaGFuZ2VzKGRlZmF1bHRDb2x1bW5zLCB0aGlzLnJlc3RvcmVEZWZhdWx0RXZlbnQpO1xuICB9XG5cbiAgY2hhbmdlUG9zaXRpb24oeyBvcHRpb24sIGRpcmVjdGlvbiB9KSB7XG4gICAgY29uc3QgaW5kZXhDb2x1bW4gPSB0aGlzLmNvbHVtbnMuZmluZEluZGV4KGVsID0+IGVsLnByb3BlcnR5ID09PSBvcHRpb24udmFsdWUpO1xuICAgIGNvbnN0IG5ld0NvbHVtbiA9IFsuLi50aGlzLmNvbHVtbnNdO1xuXG4gICAgdGhpcy5jaGFuZ2VQb3NpdGlvbkNvbHVtbihuZXdDb2x1bW4sIGluZGV4Q29sdW1uLCBkaXJlY3Rpb24pO1xuICAgIHRoaXMuY29sdW1ucyA9IG5ld0NvbHVtbjtcbiAgICB0aGlzLnZpc2libGVDb2x1bW5zQ2hhbmdlLmVtaXQodGhpcy5jb2x1bW5zKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hhbmdlUG9zaXRpb25Db2x1bW4oYXJyYXk6IEFycmF5PFBvVGFibGVDb2x1bW4+LCBpbmRleDogbnVtYmVyLCBkaXJlY3Rpb246IERpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMCwgYXJyYXkuc3BsaWNlKGluZGV4IC0gMSwgMSlbMF0pO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAwLCBhcnJheS5zcGxpY2UoaW5kZXggKyAxLCAxKVswXSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB2ZXJpZnlUb0VtaXRDaGFuZ2UoZXZlbnQ6IEFycmF5PHN0cmluZz4pIHtcbiAgICBjb25zdCBuZXdDb2x1bW5zID0gWy4uLmV2ZW50XTtcbiAgICBpZiAobmV3Q29sdW1ucy5sZW5ndGggPj0gMSAmJiB0aGlzLmFsbG93c0NoYW5nZVZpc2libGVDb2x1bW5zKCkpIHtcbiAgICAgIHRoaXMuZW1pdENoYW5nZXNUb1NlbGVjdGVkQ29sdW1ucyhuZXdDb2x1bW5zKTtcbiAgICB9XG4gICAgLy8gRGVzYWJpbGl0YSB1bHRpbW8gY2hlY2tib3ggYXRpdm9cbiAgICBpZiAobmV3Q29sdW1ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvbHVtbnNPcHRpb25zID0gdGhpcy5tYXBUYWJsZUNvbHVtbnNUb0NoZWNrYm94T3B0aW9ucyh0aGlzLmNvbHVtblVwZGF0ZSk7XG4gICAgICB0aGlzLmNvbHVtbnNPcHRpb25zID0gdGhpcy5kaXNhYmxlZExhc3RDb2x1bW4oY29sdW1uc09wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW1pdENoYW5nZXNUb1NlbGVjdGVkQ29sdW1ucyhuZXdDb2x1bW5zOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgdGhpcy52aXNpYmxlQ29sdW1ucyA9IFsuLi5uZXdDb2x1bW5zXTtcbiAgICBjb25zdCB2aXNpYmxlVGFibGVDb2x1bW5zID0gdGhpcy5nZXRWaXNpYmxlVGFibGVDb2x1bW5zKHRoaXMudmlzaWJsZUNvbHVtbnMpO1xuXG4gICAgLy8gZW1pdGUgYWx0ZXJhw6fDo28gbmFzIGNvbHVuYXMgc2VsZWNpb25hZGFzLCBwb3LDqW0gbsOjbyBlbWl0ZSBwYXJhIG8gZGV2LlxuICAgIHRoaXMudmlzaWJsZUNvbHVtbnNDaGFuZ2UuZW1pdCh2aXNpYmxlVGFibGVDb2x1bW5zKTtcbiAgfVxuXG4gIHByaXZhdGUgYWxsb3dzQ2hhbmdlVmlzaWJsZUNvbHVtbnMoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdmlzaWJsZVRhYmxlQ29sdW1ucyA9IHRoaXMuZ2V0VmlzaWJsZVRhYmxlQ29sdW1ucyh0aGlzLnZpc2libGVDb2x1bW5zKTtcblxuICAgIHJldHVybiB0aGlzLnN0cmluZ2lmeSh2aXNpYmxlVGFibGVDb2x1bW5zKSAhPT0gdGhpcy5zdHJpbmdpZnkodGhpcy5jb2x1bW5zKTtcbiAgfVxuXG4gIHByaXZhdGUgdmVyaWZ5VG9FbWl0VmlzaWJsZUNvbHVtbnMoKSB7XG4gICAgaWYgKHRoaXMucmVzdG9yZURlZmF1bHRFdmVudCkge1xuICAgICAgLy8gdmVpbyBkbyByZXN0b3JlIGRlZmF1bHRcbiAgICAgIHRoaXMudmVyaWZ5UmVzdG9yZVZhbHVlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb2kgZGlzcGFyYWRvIG5vIGNsb3NlIHBvcG92ZXI7XG4gICAgICB0aGlzLnZlcmlmeU9uQ2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHZlcmlmeVJlc3RvcmVWYWx1ZXMoKSB7XG4gICAgY29uc3QgZGVmYXVsdENvbHVtbnMgPSBbLi4udGhpcy5kZWZhdWx0Q29sdW1uc107XG4gICAgY29uc3QgZGVmYXVsdFZpc2libGVDb2x1bW5zID0gdGhpcy5nZXRWaXNpYmxlQ29sdW1ucyhkZWZhdWx0Q29sdW1ucyk7XG5cbiAgICBpZiAodGhpcy5hbGxvd3NDaGFuZ2VTZWxlY3RlZENvbHVtbnMoZGVmYXVsdFZpc2libGVDb2x1bW5zKSkge1xuICAgICAgdGhpcy52aXNpYmxlQ29sdW1uc0NoYW5nZS5lbWl0KHRoaXMuZGVmYXVsdENvbHVtbnMpO1xuICAgIH1cblxuICAgIHRoaXMucmVzdG9yZURlZmF1bHRFdmVudCA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBhbGxvd3NDaGFuZ2VTZWxlY3RlZENvbHVtbnMoZGVmYXVsdFZpc2libGVDb2x1bW5zOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgY29uc3QgdmlzaWJsZUNvbHVtbnMgPSB0aGlzLmdldFZpc2libGVDb2x1bW5zKHRoaXMuY29sdW1ucyk7XG5cbiAgICByZXR1cm4gIXRoaXMuaXNFcXVhbEFycmF5cyhkZWZhdWx0VmlzaWJsZUNvbHVtbnMsIHZpc2libGVDb2x1bW5zKTtcbiAgfVxuXG4gIHByaXZhdGUgdmVyaWZ5T25DbG9zZSgpIHtcbiAgICBpZiAodGhpcy5hbGxvd3NFbWlzc2lvbigpKSB7XG4gICAgICB0aGlzLmVtaXRWaXNpYmxlQ29sdW1ucygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW1pdFZpc2libGVDb2x1bW5zKCkge1xuICAgIHRoaXMubGFzdEVtaXR0ZWRWYWx1ZSA9IFsuLi50aGlzLnZpc2libGVDb2x1bW5zXTtcbiAgICB0aGlzLmNoYW5nZVZpc2libGVDb2x1bW5zLmVtaXQodGhpcy52aXNpYmxlQ29sdW1ucyk7XG4gIH1cblxuICBwcml2YXRlIGFsbG93c0VtaXNzaW9uKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHVwZGF0ZWRWaXNpYmxlQ29sdW1ucyA9IHRoaXMudmlzaWJsZUNvbHVtbnMgPyBbLi4udGhpcy52aXNpYmxlQ29sdW1uc10gOiBbXTtcbiAgICBjb25zdCBsYXN0RW1pdHRlZFZhbHVlID0gdGhpcy5sYXN0RW1pdHRlZFZhbHVlID8gWy4uLnRoaXMubGFzdEVtaXR0ZWRWYWx1ZV0gOiBbXTtcbiAgICBjb25zdCBsYXN0VmlzaWJsZUNvbHVtbnNTZWxlY3RlZCA9IHRoaXMubGFzdFZpc2libGVDb2x1bW5zU2VsZWN0ZWQgPyBbLi4udGhpcy5sYXN0VmlzaWJsZUNvbHVtbnNTZWxlY3RlZF0gOiBbXTtcbiAgICBjb25zdCBsYXN0VmlzaWJsZUNvbHVtbnMgPSB0aGlzLmdldFZpc2libGVDb2x1bW5zKGxhc3RWaXNpYmxlQ29sdW1uc1NlbGVjdGVkKTtcblxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmlzVXBkYXRlKHVwZGF0ZWRWaXNpYmxlQ29sdW1ucywgbGFzdEVtaXR0ZWRWYWx1ZSkgfHxcbiAgICAgIHRoaXMuaXNGaXJzdFRpbWUodXBkYXRlZFZpc2libGVDb2x1bW5zLCBsYXN0VmlzaWJsZUNvbHVtbnMpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNGaXJzdFRpbWUodXBkYXRlZFZpc2libGVDb2x1bW5zOiBBcnJheTxzdHJpbmc+LCBsYXN0VmlzaWJsZUNvbHVtbnM6IEFycmF5PHN0cmluZz4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMubGFzdEVtaXR0ZWRWYWx1ZSAmJiAhdGhpcy5pc0VxdWFsQXJyYXlzKHVwZGF0ZWRWaXNpYmxlQ29sdW1ucywgbGFzdFZpc2libGVDb2x1bW5zKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNVcGRhdGUodXBkYXRlZFZpc2libGVDb2x1bW5zOiBBcnJheTxzdHJpbmc+LCBsYXN0RW1pdHRlZFZhbHVlOiBBcnJheTxzdHJpbmc+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGFzdEVtaXR0ZWRWYWx1ZSAmJiAhdGhpcy5pc0VxdWFsQXJyYXlzKHVwZGF0ZWRWaXNpYmxlQ29sdW1ucywgbGFzdEVtaXR0ZWRWYWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIGlzRXF1YWxBcnJheXMoZmlyc3Q6IEFycmF5PHN0cmluZz4sIHNlY29uZDogQXJyYXk8c3RyaW5nPik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG9uZSA9IGZpcnN0ID8gWy4uLmZpcnN0XSA6IFtdO1xuICAgIGNvbnN0IHR3byA9IHNlY29uZCA/IFsuLi5zZWNvbmRdIDogW107XG4gICAgY29uc3QgZmlyc3RTb3J0ID0gb25lLnNsaWNlKCk7XG4gICAgY29uc3Qgc2Vjb25kU29ydCA9IHR3by5zbGljZSgpO1xuICAgIGNvbnN0IGZpcnN0U3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZmlyc3RTb3J0KTtcbiAgICBjb25zdCBzZWNvbmRTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShzZWNvbmRTb3J0KTtcblxuICAgIHJldHVybiBmaXJzdFN0cmluZyA9PT0gc2Vjb25kU3RyaW5nO1xuICB9XG5cbiAgLy8gZGVzYWJpbGl0YXLDoSBhcyBjb2x1bmFzLCBxdWUgbsOjbyBlc3RpdmVyZW0gc2VsZWNpb25hZGFzLCBhcMOzcyBleGVkZXIgbyBudW1lcm8gbWF4aW1vIGRlIGNvbHVuYXMuXG4gIHByaXZhdGUgZGlzYWJsZUNvbHVtbnNPcHRpb25zKGNvbHVtbnM6IEFycmF5PFBvQ2hlY2tib3hHcm91cE9wdGlvbj4gPSBbXSkge1xuICAgIHJldHVybiBjb2x1bW5zLm1hcChjb2x1bW4gPT4gKHtcbiAgICAgIC4uLmNvbHVtbixcbiAgICAgIGRpc2FibGVkOiB0aGlzLmlzRGlzYWJsZUNvbHVtbihjb2x1bW4udmFsdWUpXG4gICAgfSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb2x1bW5UaXRsZUxhYmVsKGNvbHVtbjogUG9UYWJsZUNvbHVtbikge1xuICAgIHJldHVybiBjb2x1bW4ubGFiZWwgfHwgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGNvbHVtbi5wcm9wZXJ0eSk7XG4gIH1cblxuICAvKiogUmV0b3JuYSB1bSBBcnJheSBkZSBjb2x1bW4ucHJvcGVydHkgZGFzIGNvbHVuYXMgcXVlIHPDo28gdmlzaXZlaXMuICovXG4gIHByaXZhdGUgZ2V0VmlzaWJsZUNvbHVtbnMoY29sdW1uczogQXJyYXk8UG9UYWJsZUNvbHVtbj4pOiBBcnJheTxzdHJpbmc+IHtcbiAgICBsZXQgdmlzaWJsZUNvbHVtbnMgPSBbXTtcblxuICAgIGNvbHVtbnMuZm9yRWFjaChjb2x1bW4gPT4ge1xuICAgICAgaWYgKHRoaXMuaXNWaXNpYmxlQ29sdW1uKGNvbHVtbiwgdmlzaWJsZUNvbHVtbnMpKSB7XG4gICAgICAgIHZpc2libGVDb2x1bW5zID0gWy4uLnZpc2libGVDb2x1bW5zLCBjb2x1bW4ucHJvcGVydHldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpc2libGVDb2x1bW5zO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1Zpc2libGVDb2x1bW4oY29sdW1uOiBQb1RhYmxlQ29sdW1uLCB2aXNpYmxlQ29sdW1uczogQXJyYXk8c3RyaW5nPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjb2x1bW4udmlzaWJsZSAhPT0gZmFsc2UgJiYgdmlzaWJsZUNvbHVtbnMubGVuZ3RoIDwgdGhpcy5tYXhDb2x1bW5zICYmIGNvbHVtbi50eXBlICE9PSAnZGV0YWlsJztcbiAgfVxuXG4gIC8qKiBSZXRvcm5hIHVtIEFycmF5IFBvVGFibGVDb2x1bW4gYSBwYXJ0aXIgZGFzIGNvbHVuYXMgdmlzaXZlaXMgbm8gZ2VyZW5jaWFkb3IgZGUgY29sdW5hcy4gKi9cbiAgcHJpdmF0ZSBnZXRWaXNpYmxlVGFibGVDb2x1bW5zKHZpc2libGVDb2x1bW5zOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8UG9UYWJsZUNvbHVtbj4ge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmNvbHVtbnMgPyBbLi4udGhpcy5jb2x1bW5zXSA6IFtdO1xuXG4gICAgcmV0dXJuIGNvbHVtbnMubWFwKGNvbHVtbiA9PiAoe1xuICAgICAgLi4uY29sdW1uLFxuICAgICAgdmlzaWJsZTogdmlzaWJsZUNvbHVtbnMuaW5jbHVkZXMoY29sdW1uLnByb3BlcnR5KSB8fCBjb2x1bW4udHlwZSA9PT0gJ2RldGFpbCdcbiAgICB9KSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMucG9wb3ZlciAmJiAhdGhpcy5wb3BvdmVyLmlzSGlkZGVuKSB7XG4gICAgICAgIHRoaXMucG9wb3Zlci5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0Rpc2FibGVDb2x1bW4ocHJvcGVydHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZpc2libGVDb2x1bW5zLmxlbmd0aCA+PSB0aGlzLm1heENvbHVtbnMgPyAhdGhpcy52aXNpYmxlQ29sdW1ucy5pbmNsdWRlcyhwcm9wZXJ0eSkgOiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgbWFwVGFibGVDb2x1bW5zVG9DaGVja2JveE9wdGlvbnMoY29sdW1uczogQXJyYXk8UG9UYWJsZUNvbHVtbj4gPSBbXSkge1xuICAgIGNvbnN0IHRhYmxlQ29sdW1ucyA9IFsuLi5jb2x1bW5zXTtcbiAgICBjb25zdCBjb2x1bW5zT3B0aW9ucyA9IFtdO1xuXG4gICAgdGFibGVDb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgIGlmIChjb2x1bW4udHlwZSAhPT0gJ2RldGFpbCcpIHtcbiAgICAgICAgY29sdW1uc09wdGlvbnMucHVzaCh7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbi5wcm9wZXJ0eSxcbiAgICAgICAgICBsYWJlbDogdGhpcy5nZXRDb2x1bW5UaXRsZUxhYmVsKGNvbHVtbiksXG4gICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuaXNEaXNhYmxlQ29sdW1uKGNvbHVtbi5wcm9wZXJ0eSksXG4gICAgICAgICAgdmlzaWJsZTogY29sdW1uLnZpc2libGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29sdW1uc09wdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIGRpc2FibGVkTGFzdENvbHVtbihjb2x1bW5zOiBBcnJheTxhbnk+KSB7XG4gICAgcmV0dXJuIGNvbHVtbnMubWFwKGNvbHVtbiA9PiAoe1xuICAgICAgLi4uY29sdW1uLFxuICAgICAgZGlzYWJsZWQ6IGNvbHVtbi50eXBlICE9PSAnZGV0YWlsJyAmJiBjb2x1bW4udmlzaWJsZSA/IHRydWUgOiBmYWxzZVxuICAgIH0pKTtcbiAgfVxuXG4gIHByaXZhdGUgb25DaGFuZ2VDb2x1bW5zKGNvbHVtbnM6IFNpbXBsZUNoYW5nZSkge1xuICAgIGNvbnN0IHsgY3VycmVudFZhbHVlID0gW10sIHByZXZpb3VzVmFsdWUgPSBbXSB9ID0gY29sdW1ucztcbiAgICB0aGlzLmNvbHVtblVwZGF0ZSA9IGNvbHVtbnMuY3VycmVudFZhbHVlO1xuXG4gICAgLy8gYXR1YWxpemFyYSBvIGRlZmF1bHRDb2x1bW5zLCBxdWFuZG8gZm9yIGEgcHJpbWVpcmEgdmV6IG91IHF1YW5kbyBvIGRlZmF1bHRDb2x1bW5zIGZvciBkaWZlcmVudGUgZG8gY3VycmVudFZhbHVlXG4gICAgaWYgKCF0aGlzLmxhc3RWaXNpYmxlQ29sdW1uc1NlbGVjdGVkICYmIHRoaXMuc3RyaW5naWZ5KHRoaXMuZGVmYXVsdENvbHVtbnMpICE9PSB0aGlzLnN0cmluZ2lmeShjdXJyZW50VmFsdWUpKSB7XG4gICAgICB0aGlzLmRlZmF1bHRDb2x1bW5zID0gWy4uLmN1cnJlbnRWYWx1ZV07XG4gICAgfVxuXG4gICAgLy8gdmVyaWZpY2Egc2UgbyB2YWxvciBhbnRlcmlvciDDqSBkaWZlcmVudGUgZG8gYXR1YWwgcGFyYSBhdHVhbGl6YXIgYXMgY29sdW1uc09wdGlvbnMgYXBlbmFzIHF1YW5kbyBmb3IgbmVjZXNzYXJpb1xuICAgIGlmICh0aGlzLnN0cmluZ2lmeShwcmV2aW91c1ZhbHVlKSAhPT0gdGhpcy5zdHJpbmdpZnkoY3VycmVudFZhbHVlKSkge1xuICAgICAgdGhpcy51cGRhdGVWYWx1ZXMoY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVZhbHVlcyhjdXJyZW50VmFsdWU6IEFycmF5PFBvVGFibGVDb2x1bW4+KSB7XG4gICAgY29uc3QgdmlzaWJsZUNvbHVtbnMgPSB0aGlzLmdldFZpc2libGVDb2x1bW5zKGN1cnJlbnRWYWx1ZSk7XG4gICAgdGhpcy52aXNpYmxlQ29sdW1ucyA9IFsuLi52aXNpYmxlQ29sdW1uc107XG5cbiAgICBjb25zdCBjb2x1bW5zT3B0aW9ucyA9IHRoaXMubWFwVGFibGVDb2x1bW5zVG9DaGVja2JveE9wdGlvbnMoY3VycmVudFZhbHVlKTtcbiAgICB0aGlzLmNvbHVtbnNPcHRpb25zID0gdGhpcy5kaXNhYmxlQ29sdW1uc09wdGlvbnMoY29sdW1uc09wdGlvbnMpO1xuXG4gICAgdGhpcy5jaGVja0NoYW5nZXModmlzaWJsZUNvbHVtbnMsIGZhbHNlKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLnJlc2l6ZUxpc3RlbmVyKSB7XG4gICAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdHJpbmdpZnkoY29sdW1uczogQXJyYXk8UG9UYWJsZUNvbHVtbj4pIHtcbiAgICAvLyBuw6NvIGZheiBvIHN0cmluZ2lmeSBkYSBwcm9wcmllZGFkZSBpY29uIGUgc2VhcmNoU2VydmljZSwgcG9pcyBwb2RlIGNvbnRlciBvYmpldG8gY29tcGxleG8gZSBkaXNwYXJhciB1bSBlcnJvLlxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShjb2x1bW5zLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKGtleSAhPT0gJ2ljb24nICYmIGtleSAhPT0gJ3NlYXJjaFNlcnZpY2UnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiPHBvLXBvcG92ZXIgI3BvcG92ZXIgKm5nSWY9XCJ0YXJnZXRcIiBbcC10YXJnZXRdPVwidGFyZ2V0XCIgcC1wb3NpdGlvbj1cImJvdHRvbS1sZWZ0XCIgKHAtY2xvc2UpPVwiY2hlY2tDaGFuZ2VzKFtdLCB0cnVlKVwiPlxuICA8ZGl2IGNsYXNzPVwicG8tdGFibGUtY29sdW1uLW1hbmFnZXItaGVhZGVyXCI+XG4gICAgPGRpdiBjbGFzcz1cInBvLXRhYmxlLWNvbHVtbi1tYW5hZ2VyLWhlYWRlci10aXRsZVwiPnt7IGxpdGVyYWxzLmNvbHVtbnNNYW5hZ2VyIH19PC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwicG8tdGFibGUtY29sdW1uLW1hbmFnZXItaGVhZGVyLWNsb3NlXCI+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzPVwicG8tdGFibGUtY29sdW1uLW1hbmFnZXItaGVhZGVyLWNsb3NlLWJ1dHRvbiBwby1jbGlja2FibGUgcG8taWNvbiBwby1pY29uLWNsb3NlXCJcbiAgICAgICAgKGNsaWNrKT1cInBvcG92ZXIuY2xvc2UoKVwiXG4gICAgICA+PC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJwby10YWJsZS1jb2x1bW4tbWFuYWdlci1ib2R5XCI+XG4gICAgPHBvLXRhYmxlLWxpc3QtbWFuYWdlclxuICAgICAgbmFtZT1cInZpc2libGVDb2x1bW5zXCJcbiAgICAgIFsobmdNb2RlbCldPVwidmlzaWJsZUNvbHVtbnNcIlxuICAgICAgcC1jb2x1bW5zPVwiMVwiXG4gICAgICBbcC1vcHRpb25zXT1cImNvbHVtbnNPcHRpb25zXCJcbiAgICAgIChwLWNoYW5nZSk9XCJjaGVja0NoYW5nZXMoJGV2ZW50LCBmYWxzZSlcIlxuICAgICAgKHAtY2hhbmdlLXBvc2l0aW9uKT1cImNoYW5nZVBvc2l0aW9uKCRldmVudClcIlxuICAgICAgW3AtY29sdW1ucy1tYW5hZ2VyXT1cImNvbHVtbnNcIlxuICAgID5cbiAgICA8L3BvLXRhYmxlLWxpc3QtbWFuYWdlcj5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cInBvLXRhYmxlLWNvbHVtbi1tYW5hZ2VyLWZvb3RlclwiPlxuICAgIDxwby1idXR0b25cbiAgICAgIGNsYXNzPVwicG8tdGFibGUtY29sdW1uLW1hbmFnZXItZm9vdGVyLXJlc3RvcmVcIlxuICAgICAgcC1raW5kPVwidGVydGlhcnlcIlxuICAgICAgW3AtbGFiZWxdPVwibGl0ZXJhbHMucmVzdG9yZURlZmF1bHRcIlxuICAgICAgKHAtY2xpY2spPVwicmVzdG9yZSgpXCJcbiAgICA+XG4gICAgPC9wby1idXR0b24+XG4gIDwvZGl2PlxuPC9wby1wb3BvdmVyPlxuIl19