import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, convertToInt, removeDuplicatedOptions } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { requiredFailed } from '../validators';
import * as i0 from "@angular/core";
const poRadioGroupColumnsDefaultLength = 6;
const poRadioGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 *
 * #### Acessibilidade tratada no componente interno `po-radio`:
 *
 * Algumas diretrizes de acessibilidade já são tratadas no componente, internamente, e não podem ser alteradas pelo proprietário do conteúdo. São elas:
 *
 * - O componente foi desenvolvido utilizando controles padrões HTML para permitir a identificação do mesmo na interface por tecnologias assistivas. [WCAG 4.1.2: Name, Role, Value](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)
 * - A cor não deve ser o único meio para diferenciar o radio button normal do selecionado, por isso deve-se manter uma diferença visual entre os estados. [WGAG 1.4.1: Use of Color, 3.2.4: Consistent Identification](https://www.w3.org/WAI/WCAG21/Understanding/use-of-color)
 * - Quando em foco, o componente é ativado usando as teclas de Espaço e Enter do teclado. [W3C WAI-ARIA 3.5 Button - Keyboard Interaction](https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-3)
 * - A área do foco precisar ter uma espessura de pelo menos 2 pixels CSS e o foco não pode ficar escondido por outros elementos da tela. [(WCAG 2.4.12: Focus Appearance](https://www.w3.org/WAI/WCAG22/Understanding/focus-appearance-enhanced)
 *
 * Conforme documentação em: https://doc.animaliads.io/docs/components/radio
 */
export class PoRadioGroupBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento ao alterar valor do campo.
         */
        this.change = new EventEmitter();
        this.mdColumns = poRadioGroupColumnsDefaultLength;
        this.onTouched = null;
        this._columns = poRadioGroupColumnsDefaultLength;
        this._disabled = false;
        this._required = false;
        this.onChangePropagate = null;
        /**
         * Define se a indicação de campo obrigatório será exibida.
         *
         * > Não será exibida a indicação se:
         * - Não possuir `p-help` e/ou `p-label`.
         */
        this.showRequired = false;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a quantidade de colunas para exibição das opções.
     *
     * **Considerações:**
     *  - É possível exibir as opções entre `1` e `4` colunas.
     *  - O número máximo de colunas é invariável nas seguintes resoluções:
     *    + `sm`: `1`
     *    + `md`: `2`
     *
     * @default `2`
     */
    set columns(value) {
        const columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
        this._columns = this.getGridSystemColumns(columns, 4);
        this.mdColumns = this.getGridSystemColumns(columns, 2);
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel();
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * Lista de opções que serão exibidas.
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
     */
    set options(value) {
        this._options = value;
        removeDuplicatedOptions(this.options);
    }
    get options() {
        return this._options;
    }
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    changeValue(changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    registerOnChange(fn) {
        this.onChangePropagate = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        const element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    }
    checkColumnsRange(columns, maxColumns) {
        const minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    }
    getGridSystemColumns(columns, maxColumns) {
        const gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
PoRadioGroupBaseComponent.ɵfac = function PoRadioGroupBaseComponent_Factory(t) { return new (t || PoRadioGroupBaseComponent)(); };
PoRadioGroupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoRadioGroupBaseComponent, inputs: { autoFocus: ["p-auto-focus", "autoFocus"], name: "name", optional: ["p-optional", "optional"], columns: ["p-columns", "columns"], disabled: ["p-disabled", "disabled"], required: ["p-required", "required"], showRequired: ["p-show-required", "showRequired"], options: ["p-options", "options"], size: ["p-size", "size"] }, outputs: { change: "p-change" } });
__decorate([
    InputBoolean()
], PoRadioGroupBaseComponent.prototype, "autoFocus", void 0);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRadioGroupBaseComponent, [{
        type: Directive
    }], null, { autoFocus: [{
            type: Input,
            args: ['p-auto-focus']
        }], name: [{
            type: Input,
            args: ['name']
        }], optional: [{
            type: Input,
            args: ['p-optional']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], columns: [{
            type: Input,
            args: ['p-columns']
        }], disabled: [{
            type: Input,
            args: ['p-disabled']
        }], required: [{
            type: Input,
            args: ['p-required']
        }], showRequired: [{
            type: Input,
            args: ['p-show-required']
        }], options: [{
            type: Input,
            args: ['p-options']
        }], size: [{
            type: Input,
            args: ['p-size']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,