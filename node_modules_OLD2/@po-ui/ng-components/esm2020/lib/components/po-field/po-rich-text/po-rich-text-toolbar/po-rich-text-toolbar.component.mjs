import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isIE } from '../../../../utils/util';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextImageModalComponent } from '../po-rich-text-image-modal/po-rich-text-image-modal.component';
import { PoRichTextLinkModalComponent } from '../po-rich-text-link-modal/po-rich-text-link-modal.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/po-language/po-language.service";
import * as i2 from "@angular/common";
import * as i3 from "../../../po-button-group/po-button-group.component";
import * as i4 from "../../../../directives/po-tooltip/po-tooltip.directive";
import * as i5 from "../po-rich-text-image-modal/po-rich-text-image-modal.component";
import * as i6 from "../po-rich-text-link-modal/po-rich-text-link-modal.component";
const _c0 = ["colorPickerInput"];
const _c1 = ["toolbarElement"];
function PoRichTextToolbarComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 15)(1, "div", 16)(2, "button", 17)(3, "input", 18, 19);
    i0.ɵɵlistener("change", function PoRichTextToolbarComponent_div_4_Template_input_change_3_listener($event) { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.changeTextColor($event.target.value)); });
    i0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r1.readonly)("p-tooltip", ctx_r1.literals.textColor);
    i0.ɵɵattribute("aria-label", ctx_r1.literals.textColor);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("disabled", ctx_r1.readonly);
    i0.ɵɵattribute("aria-label", ctx_r1.literals.textColor);
} }
function PoRichTextToolbarComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 20);
    i0.ɵɵelement(1, "po-button-group", 7);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("p-buttons", ctx_r2.alignButtons);
} }
const poRichTextDefaultColor = '#000000';
export class PoRichTextToolbarComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.command = new EventEmitter();
        this.modal = new EventEmitter();
        this.linkEditing = new EventEmitter();
        this.literals = {
            ...poRichTextLiteralsDefault[this.languageService.getShortLanguage()]
        };
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'po-icon-align-left',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'po-icon-align-center',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'po-icon-align-right',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'po-icon-align-justify',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'po-icon-text-bold',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'po-icon-text-italic',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'po-icon-text-underline',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'po-icon-list',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.linkButtons = [
            {
                command: 'Createlink',
                icon: 'po-icon-link',
                tooltip: `${this.literals.insertLink} (Ctrl + K)`,
                action: () => this.richTextLinkModal.openModal(this.selectedLinkElement)
            }
        ];
        this.mediaButtons = [
            {
                tooltip: this.literals.insertImage,
                icon: 'po-icon-picture',
                action: () => this.richTextImageModal.openModal()
            }
        ];
    }
    set disabledTextAlign(value) {
        this._disabledTextAlign = value;
    }
    get disabledTextAlign() {
        return this._disabledTextAlign;
    }
    set readonly(value) {
        this._readonly = value;
        this.toggleDisableButtons(this._readonly);
    }
    get readonly() {
        return this._readonly;
    }
    get isInternetExplorer() {
        return isIE();
    }
    ngAfterViewInit() {
        this.removeButtonFocus();
        this.setColorInColorPicker(poRichTextDefaultColor);
    }
    changeTextColor(value) {
        const command = 'foreColor';
        this.command.emit({ command, value });
    }
    emitLinkEditing(isLinkEdit) {
        this.linkEditing.emit(isLinkEdit);
    }
    selectedLink(selectedLinkElement) {
        this.selectedLinkElement = selectedLinkElement;
    }
    setButtonsStates(obj) {
        if (!this.readonly) {
            this.alignButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.formatButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
            this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
            this.setColorInColorPicker(obj.hexColor);
        }
    }
    shortcutTrigger() {
        this.richTextLinkModal.openModal(this.selectedLinkElement);
    }
    emitCommand(command) {
        this.command.emit(command);
    }
    emitAlignCommand(command) {
        const index = this.alignButtons.findIndex(btn => btn.command === command);
        if (!this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    }
    removeButtonFocus() {
        const buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach(button => button.setAttribute('tabindex', '-1'));
    }
    setColorInColorPicker(color) {
        this.colorPickerInput.nativeElement.value = color;
    }
    toggleDisableButtons(state) {
        this.alignButtons.forEach(button => (button.disabled = state));
        this.formatButtons.forEach(button => (button.disabled = state));
        this.listButtons[0].disabled = state;
        this.linkButtons[0].disabled = state;
        this.mediaButtons[0].disabled = state;
    }
}
PoRichTextToolbarComponent.ɵfac = function PoRichTextToolbarComponent_Factory(t) { return new (t || PoRichTextToolbarComponent)(i0.ɵɵdirectiveInject(i1.PoLanguageService)); };
PoRichTextToolbarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoRichTextToolbarComponent, selectors: [["po-rich-text-toolbar"]], viewQuery: function PoRichTextToolbarComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5, ElementRef);
        i0.ɵɵviewQuery(_c1, 7);
        i0.ɵɵviewQuery(PoRichTextImageModalComponent, 7);
        i0.ɵɵviewQuery(PoRichTextLinkModalComponent, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.colorPickerInput = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toolbarElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.richTextImageModal = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.richTextLinkModal = _t.first);
    } }, inputs: { disabledTextAlign: ["p-disabled-text-align", "disabledTextAlign"], readonly: ["p-readonly", "readonly"] }, outputs: { command: "p-command", modal: "p-modal", linkEditing: "p-link-editing" }, decls: 16, vars: 6, consts: [[1, "po-rich-text-toolbar"], ["toolbarElement", ""], ["data-rich-text-toolbar", "format", 1, "po-rich-text-toolbar-button-align"], ["p-toggle", "multiple", 3, "p-buttons"], ["class", "po-rich-text-toolbar-button-align", "data-rich-text-toolbar", "color", 4, "ngIf"], ["class", "po-rich-text-toolbar-button-align", "data-rich-text-toolbar", "align", 4, "ngIf"], ["data-rich-text-toolbar", "list", 1, "po-rich-text-toolbar-button-align"], ["p-toggle", "single", 3, "p-buttons"], ["data-rich-text-toolbar", "link", 1, "po-rich-text-toolbar-button-align"], [3, "p-buttons"], ["data-rich-text-toolbar", "media", 1, "po-rich-text-toolbar-button-align"], [3, "p-command"], ["richTextImageModal", ""], [3, "p-command", "p-link-editing"], ["richTextLinkModal", ""], ["data-rich-text-toolbar", "color", 1, "po-rich-text-toolbar-button-align"], [1, "po-rich-text-toolbar-color-picker-container"], [1, "po-button", "po-button-default", "po-rich-text-toolbar-color-picker-button", 3, "disabled", "p-tooltip"], ["type", "color", 1, "po-rich-text-toolbar-color-picker-input", 3, "disabled", "change"], ["colorPickerInput", ""], ["data-rich-text-toolbar", "align", 1, "po-rich-text-toolbar-button-align"]], template: function PoRichTextToolbarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1)(2, "div", 2);
        i0.ɵɵelement(3, "po-button-group", 3);
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(4, PoRichTextToolbarComponent_div_4_Template, 5, 5, "div", 4);
        i0.ɵɵtemplate(5, PoRichTextToolbarComponent_div_5_Template, 2, 1, "div", 5);
        i0.ɵɵelementStart(6, "div", 6);
        i0.ɵɵelement(7, "po-button-group", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(8, "div", 8);
        i0.ɵɵelement(9, "po-button-group", 9);
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(10, "div", 10);
        i0.ɵɵelement(11, "po-button-group", 9);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(12, "po-rich-text-image-modal", 11, 12);
        i0.ɵɵlistener("p-command", function PoRichTextToolbarComponent_Template_po_rich_text_image_modal_p_command_12_listener($event) { return ctx.emitCommand($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(14, "po-rich-text-link-modal", 13, 14);
        i0.ɵɵlistener("p-command", function PoRichTextToolbarComponent_Template_po_rich_text_link_modal_p_command_14_listener($event) { return ctx.emitCommand($event); })("p-link-editing", function PoRichTextToolbarComponent_Template_po_rich_text_link_modal_p_link_editing_14_listener($event) { return ctx.emitLinkEditing($event); });
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("p-buttons", ctx.formatButtons);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.isInternetExplorer);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.disabledTextAlign);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-buttons", ctx.listButtons);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-buttons", ctx.linkButtons);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-buttons", ctx.mediaButtons);
    } }, dependencies: [i2.NgIf, i3.PoButtonGroupComponent, i4.PoTooltipDirective, i5.PoRichTextImageModalComponent, i6.PoRichTextLinkModalComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoRichTextToolbarComponent, [{
        type: Component,
        args: [{ selector: 'po-rich-text-toolbar', template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"format\">\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\"> </po-button-group>\n  </div>\n\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"color\">\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\n      <button\n        class=\"po-button po-button-default po-rich-text-toolbar-color-picker-button\"\n        [disabled]=\"readonly\"\n        [p-tooltip]=\"literals.textColor\"\n        [attr.aria-label]=\"literals.textColor\"\n      >\n        <input\n          #colorPickerInput\n          class=\"po-rich-text-toolbar-color-picker-input\"\n          type=\"color\"\n          [disabled]=\"readonly\"\n          (change)=\"changeTextColor($event.target.value)\"\n          [attr.aria-label]=\"literals.textColor\"\n        />\n      </button>\n    </div>\n  </div>\n\n  <div *ngIf=\"!disabledTextAlign\" class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"list\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"link\">\n    <po-button-group [p-buttons]=\"linkButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\" data-rich-text-toolbar=\"media\">\n    <po-button-group [p-buttons]=\"mediaButtons\"> </po-button-group>\n  </div>\n</div>\n\n<po-rich-text-image-modal #richTextImageModal (p-command)=\"emitCommand($event)\"> </po-rich-text-image-modal>\n\n<po-rich-text-link-modal\n  #richTextLinkModal\n  (p-command)=\"emitCommand($event)\"\n  (p-link-editing)=\"emitLinkEditing($event)\"\n>\n</po-rich-text-link-modal>\n" }]
    }], function () { return [{ type: i1.PoLanguageService }]; }, { colorPickerInput: [{
            type: ViewChild,
            args: ['colorPickerInput', { read: ElementRef }]
        }], toolbarElement: [{
            type: ViewChild,
            args: ['toolbarElement', { static: true }]
        }], richTextImageModal: [{
            type: ViewChild,
            args: [PoRichTextImageModalComponent, { static: true }]
        }], richTextLinkModal: [{
            type: ViewChild,
            args: [PoRichTextLinkModalComponent, { static: true }]
        }], command: [{
            type: Output,
            args: ['p-command']
        }], modal: [{
            type: Output,
            args: ['p-modal']
        }], linkEditing: [{
            type: Output,
            args: ['p-link-editing']
        }], disabledTextAlign: [{
            type: Input,
            args: ['p-disabled-text-align']
        }], readonly: [{
            type: Input,
            args: ['p-readonly']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,